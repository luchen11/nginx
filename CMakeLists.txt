# this file from https://github.com/i-rinat   
# CMake adaptation of Nginx 1.11.6 build scripts. Targeting Linux, so any code
# obviously related to other platforms is omitted.

# Configurables.

set(NGX_PREFIX "${CMAKE_INSTALL_PREFIX}"  CACHE STRING "nginx install prefix")
set(NGX_SBIN_PATH       "${NGX_PREFIX}/bin/nginx"       CACHE STRING "")
set(NGX_MODULES_PATH    "${NGX_PREFIX}/modules"         CACHE STRING "")
set(NGX_CONF_PATH       "${NGX_PREFIX}/conf/nginx.conf" CACHE STRING "")
set(NGX_ERROR_LOG_PATH  "${NGX_PREFIX}/logs/error.log"  CACHE STRING "")
set(NGX_PID_PATH        "${NGX_PREFIX}/logs/nginx.pid"  CACHE STRING "")
set(NGX_LOCK_PATH       "${NGX_PREFIX}/logs/nginx.lock" CACHE STRING "")
set(NGX_USER            "nobody"          CACHE STRING "nginx user")
set(NGX_GROUP           "nogroup"         CACHE STRING "nginx group")
set(NGX_PLATFORM "" CACHE STRING "NGX platform to build for")
set(NGX_BUILD "")

set(EVENT_SELECT "NO")
set(EVENT_POLL "NO")
set(USE_THREADS "NO")
set(NGX_FILE_AIO "NO")
set(HTTP "YES")
set(HTTP_CACHE "YES")
set(NGX_HTTP_LOG_PATH          "logs/access.log"  CACHE STRING "")
set(NGX_HTTP_CLIENT_TEMP_PATH  "temp/client_body" CACHE STRING "")
set(NGX_HTTP_PROXY_TEMP_PATH   "temp/proxy"       CACHE STRING "")
set(NGX_HTTP_FASTCGI_TEMP_PATH "temp/fastcgi"     CACHE STRING "")
set(NGX_HTTP_UWSGI_TEMP_PATH   "temp/uwsgi"       CACHE STRING "")
set(NGX_HTTP_SCGI_TEMP_PATH    "temp/scgi"        CACHE STRING "")
set(HTTP_SSL "NO")
set(HTTP_V2 "NO")
set(HTTP_REALIP "NO")
set(HTTP_ADDITION "NO")
set(HTTP_XSLT "NO")
set(HTTP_IMAGE_FILTER "NO")
set(HTTP_GEOIP "NO")
set(HTTP_SUB "NO")
set(HTTP_DAV "NO")
set(HTTP_FLV "NO")
set(HTTP_MP4 "NO")
set(HTTP_GUNZIP "NO")
set(HTTP_GZIP_STATIC "NO")
set(HTTP_AUTH_REQUEST "NO")
set(HTTP_RANDOM_INDEX "NO")
set(HTTP_SECURE_LINK "NO")
set(HTTP_DEGRADATION "NO")
set(HTTP_SLICE "NO")
set(HTTP_CHARSET "YES")
set(HTTP_GZIP "YES")
set(HTTP_SSI "YES")
set(HTTP_USERID "YES")
set(HTTP_ACCESS "YES")
set(HTTP_AUTH_BASIC "YES")
set(HTTP_AUTOINDEX "YES")
set(HTTP_GEO "YES")
set(HTTP_MAP "YES")
set(HTTP_SPLIT_CLIENTS "YES")
set(HTTP_REFERER "YES")
set(HTTP_REWRITE "YES")
set(HTTP_PROXY "YES")
set(HTTP_FASTCGI "YES")
set(HTTP_UWSGI "YES")
set(HTTP_SCGI "YES")
set(HTTP_MEMCACHED "YES")
set(HTTP_LIMIT_CONN "YES")
set(HTTP_LIMIT_REQ "YES")
set(HTTP_EMPTY_GIF "YES")
set(HTTP_BROWSER "YES")
set(HTTP_UPSTREAM_HASH "YES")
set(HTTP_UPSTREAM_IP_HASH "YES")
set(HTTP_UPSTREAM_LEAST_CONN "YES")
set(HTTP_UPSTREAM_KEEPALIVE "YES")
set(HTTP_UPSTREAM_ZONE "YES")
set(HTTP_PERL "NO")
set(HTTP_STUB_STATUS "NO")
set(MAIL "NO")
set(MAIL_SSL "NO")
set(MAIL_POP3 "YES")
set(MAIL_IMAP "YES")
set(MAIL_SMTP "YES")
set(STREAM "NO")
set(STREAM_SSL "NO")
set(STREAM_REALIP "NO")
set(STREAM_GEOIP "NO")
set(STREAM_SSL_PREREAD "NO")
set(STREAM_LIMIT_CONN "YES")
set(STREAM_ACCESS "YES")
set(STREAM_GEO "YES")
set(STREAM_MAP "YES")
set(STREAM_SPLIT_CLIENTS "YES")
set(STREAM_RETURN "YES")
set(STREAM_UPSTREAM_HASH "YES")
set(STREAM_UPSTREAM_LEAST_CONN "YES")
set(STREAM_UPSTREAM_ZONE "YES")
set(NGX_GOOGLE_PERFTOOLS "NO")
set(NGX_CPP_TEST "NO")
set(NGX_COMPAT "NO")
set(NGX_DEBUG "NO" CACHE STRING "enable nginx debug")

# end of configurables

include(CheckCSourceCompiles)
include(CheckCSourceRuns)
include(CheckTypeSize)
include(TestBigEndian)

# ngx: auto/options script

set(USE_PCRE "NO")
set(EVENT_FOUND "NO")
set(HTTP_POSTPONE "NO")
set(DYNAMIC_MODULES "")
set(USE_OPENSSL "NO")
set(USE_ZLIB "NO")
set(USE_PERL "NO")
set(NGX_PERL "perl")
set(USE_LIBXSLT "NO")
set(USE_LIBGD "NO")
set(USE_GEOIP "NO")
set(NGX_LIBATOMIC "NO")
set(NGX_CONFIGURE "")
set(NGX_TEST_BUILD_EPOLL "NO")

if (HTTP STREQUAL "NO")
    set(HTTP_CHARSET "NO")
    set(HTTP_GZIP    "NO")
    set(HTTP_SSI     "NO")
    set(HTTP_USERID  "NO")
    set(HTTP_ACCESS  "NO")
    set(HTTP_REWRITE "NO")
    set(HTTP_PROXY   "NO")
    set(HTTP_FASTCGI "NO")
endif()

get_filename_component(NGX_CONF_PREFIX "${NGX_CONF_PATH}" DIRECTORY)

# ngx: auto/init script

set(AUTOGENERATED_DIR "${CMAKE_BINARY_DIR}/autogenerated")
file(MAKE_DIRECTORY "${AUTOGENERATED_DIR}")

set(NGX_MODULES_C_NAME "${AUTOGENERATED_DIR}/ngx_modules.c")
set(NGX_AUTO_HEADERS_H_NAME "${AUTOGENERATED_DIR}/ngx_auto_headers.h")
set(NGX_AUTO_CONFIG_H_NAME "${AUTOGENERATED_DIR}/ngx_auto_config.h")

# ngx: auto/sources script

set(CORE_MODULES ngx_core_module ngx_errlog_module ngx_conf_module)

set(CORE_SRCS
    src/core/nginx.c
    src/core/ngx_log.c
    src/core/ngx_palloc.c
    src/core/ngx_array.c
    src/core/ngx_list.c
    src/core/ngx_hash.c
    src/core/ngx_buf.c
    src/core/ngx_queue.c
    src/core/ngx_output_chain.c
    src/core/ngx_string.c
    src/core/ngx_parse.c
    src/core/ngx_parse_time.c
    src/core/ngx_inet.c
    src/core/ngx_file.c
    src/core/ngx_crc32.c
    src/core/ngx_murmurhash.c
    src/core/ngx_md5.c
    src/core/ngx_sha1.c
    src/core/ngx_rbtree.c
    src/core/ngx_radix_tree.c
    src/core/ngx_slab.c
    src/core/ngx_times.c
    src/core/ngx_shmtx.c
    src/core/ngx_connection.c
    src/core/ngx_cycle.c
    src/core/ngx_spinlock.c
    src/core/ngx_rwlock.c
    src/core/ngx_cpuinfo.c
    src/core/ngx_conf_file.c
    src/core/ngx_module.c
    src/core/ngx_resolver.c
    src/core/ngx_open_file_cache.c
    src/core/ngx_crypt.c
    src/core/ngx_proxy_protocol.c
    src/core/ngx_syslog.c
)

set(EVENT_MODULES ngx_events_module ngx_event_core_module)

set(EVENT_SRCS
    src/event/ngx_event.c
    src/event/ngx_event_timer.c
    src/event/ngx_event_posted.c
    src/event/ngx_event_accept.c
    src/event/ngx_event_connect.c
    src/event/ngx_event_pipe.c
    src/event/ngx_event_udp.c
)

set(SELECT_MODULE ngx_select_module)
set(SELECT_SRCS src/event/modules/ngx_select_module.c)

set(POLL_MODULE ngx_poll_module)
set(POLL_SRCS src/event/modules/ngx_poll_module.c)

set(EPOLL_MODULE ngx_epoll_module)
set(EPOLL_SRCS src/event/modules/ngx_epoll_module.c)

set(FILE_AIO_SRCS src/os/unix/ngx_file_aio_read.c)
set(LINUX_AIO_SRCS src/os/unix/ngx_linux_aio_read.c)

set(UNIX_SRCS
    ${CORE_SRCS} ${EVENT_SRCS}
    src/os/unix/ngx_time.c
    src/os/unix/ngx_errno.c
    src/os/unix/ngx_alloc.c
    src/os/unix/ngx_files.c
    src/os/unix/ngx_socket.c
    src/os/unix/ngx_recv.c
    src/os/unix/ngx_readv_chain.c
    src/os/unix/ngx_udp_recv.c
    src/os/unix/ngx_send.c
    src/os/unix/ngx_writev_chain.c
    src/os/unix/ngx_udp_send.c
    src/os/unix/ngx_udp_sendmsg_chain.c
    src/os/unix/ngx_channel.c
    src/os/unix/ngx_shmem.c
    src/os/unix/ngx_process.c
    src/os/unix/ngx_daemon.c
    src/os/unix/ngx_setaffinity.c
    src/os/unix/ngx_setproctitle.c
    src/os/unix/ngx_posix_init.c
    src/os/unix/ngx_user.c
    src/os/unix/ngx_dlopen.c
    src/os/unix/ngx_process_cycle.c
)

set(THREAD_POOL_MODULE ngx_thread_pool_module)
set(THREAD_POOL_SRCS
    src/core/ngx_thread_pool.c
    src/os/unix/ngx_thread_cond.c
    src/os/unix/ngx_thread_mutex.c
    src/os/unix/ngx_thread_id.c
)

set(LINUX_SRCS src/os/unix/ngx_linux_init.c)
set(LINUX_SENDFILE_SRCS src/os/unix/ngx_linux_sendfile_chain.c)

set(HTTP_FILE_CACHE_SRCS src/http/ngx_http_file_cache.c)

# ngx: configure script

# clear autogenerated files
file(WRITE "${NGX_AUTO_CONFIG_H_NAME}" "")
file(WRITE "${NGX_AUTO_HEADERS_H_NAME}" "\n")
file(WRITE "${NGX_MODULES_C_NAME}" "")

function(ngx_auto_have option_name)
    set(A "\n")
    set(A "${A}#ifndef ${option_name}\n")
    set(A "${A}#define ${option_name}  1\n")
    set(A "${A}#endif\n\n")
    file(APPEND "${NGX_AUTO_CONFIG_H_NAME}" "${A}")
endfunction()

function(ngx_auto_nohave option_name)
    set(A "\n")
    set(A "${A}#ifndef ${option_name}\n")
    set(A "${A}#define ${option_name}  0\n")
    set(A "${A}#endif\n\n")
    file(APPEND "${NGX_AUTO_CONFIG_H_NAME}" "${A}")
endfunction()

function(ngx_auto_define option_name option_value)
    set(A "\n")
    set(A "${A}#ifndef ${option_name}\n")
    set(A "${A}#define ${option_name}  ${option_value}\n")
    set(A "${A}#endif\n\n")
    file(APPEND "${NGX_AUTO_CONFIG_H_NAME}" "${A}")
endfunction()

function(ngx_auto_have_headers option_name)
    set(A "\n")
    set(A "${A}#ifndef ${option_name}\n")
    set(A "${A}#define ${option_name}  1\n")
    set(A "${A}#endif\n\n")
    file(APPEND "${NGX_AUTO_HEADERS_H_NAME}" "${A}")
endfunction()

function(ngx_append_auto_config str)
    file(APPEND "${NGX_AUTO_CONFIG_H_NAME}" "${str}\n")
endfunction()

ngx_append_auto_config("#define NGX_CONFIGURE \"${NGX_CONFIGURE}\"")

if (NGX_DEBUG STREQUAL "YES")
    ngx_auto_have("NGX_DEBUG")
endif()

if (NGX_PLATFORM STREQUAL "")
    message(STATUS "ngx: checking for OS")
    execute_process(COMMAND uname -s
                    OUTPUT_VARIABLE NGX_SYSTEM
                    ERROR_QUIET
                    OUTPUT_STRIP_TRAILING_WHITESPACE)
    execute_process(COMMAND uname -r
                    OUTPUT_VARIABLE NGX_RELEASE
                    ERROR_QUIET
                    OUTPUT_STRIP_TRAILING_WHITESPACE)
    execute_process(COMMAND uname -s
                    OUTPUT_VARIABLE NGX_MACHINE
                    ERROR_QUIET
                    OUTPUT_STRIP_TRAILING_WHITESPACE)

    message(STATUS "ngx:  + ${NGX_SYSTEM} ${NGX_RELEASE} ${NGX_MACHINE}")

    set(NGX_PLATFORM "${NGX_SYSTEM}:${NGX_RELEASE}:${NGX_MACHINE}")

else()
    message(STATUS "ngx: building for ${NGX_PLATFORM}")
endif()

ngx_auto_define("NGX_COMPILER" "\"unknown\"")

function(ngx_auto_feature)
    if (NOT ngx_feature_name STREQUAL "")
        string(TOUPPER ngx_feature_name ngx_have_feature)
    endif()

    set(B "")
    foreach(entry ${ngx_feature_incs})
        set(B "${B}${entry}\n")
    endforeach()
    set(ngx_feature_incs "${B}")

    set(B "")
    foreach(entry ${ngx_feature_test})
        set(B "${B}${entry}\n")
    endforeach()
    set(ngx_feature_test "${B}")

    set(A "")
    set(A "${A}#include <sys/types.h>\n")
    set(A "${A}${NGX_INCLUDE_UNISTD_H}\n")
    set(A "${A}${ngx_feature_incs}\n")
    set(A "${A}\n")
    set(A "${A}int main(void) {\n")
    set(A "${A}    ${ngx_feature_test};\n")
    set(A "${A}    return 0;\n")
    set(A "${A}}\n")

    # message(STATUS "A = \n${A}\n")

    set(CMAKE_REQUIRED_INCLUDES ${ngx_feature_path})
    set(CMAKE_REQUIRED_LIBRARIES ${ngx_feature_libs})
    set(CMAKE_REQUIRED_QUIET "YES")

    unset(ngx_found)
    unset(ngx_found CACHE)
    unset(ngx_found PARENT_SCOPE)

    if ("${ngx_feature_run}" STREQUAL "yes")
        CHECK_C_SOURCE_RUNS("${A}" ngx_found)

    elseif ("${ngx_feature_run}" STREQUAL "no")
        CHECK_C_SOURCE_COMPILES("${A}" ngx_found)

    elseif ("${ngx_feature_run}" STREQUAL "value")
        set(MACRO_CHECK_FUNCTION_DEFINITIONS
            "-Dngx_found ${CMAKE_REQUIRED_FLAGS}")

        # prepare link directories list
        if (CMAKE_REQUIRED_LIBRARIES)
            set(CHECK_C_SOURCE_COMPILES_ADD_LIBRARIES
                LINK_LIBRARIES ${CMAKE_REQUIRED_LIBRARIES})
        else()
            set(CHECK_C_SOURCE_COMPILES_ADD_LIBRARIES)
        endif()

        if (CMAKE_REQUIRED_INCLUDES)
            set(CHECK_C_SOURCE_COMPILES_ADD_INCLUDES
                "-DINCLUDE_DIRECTORIES:STRING=${CMAKE_REQUIRED_INCLUDES}")
        else()
            set(CHECK_C_SOURCE_COMPILES_ADD_INCLUDES)
        endif()

        set(tmp_src_name
            "${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/CMakeTmp/src.c")
        file(WRITE "${tmp_src_name}" "${A}\n")

        try_run(ngx_found_EXITCODE ngx_found_COMPILED
                "${CMAKE_BINARY_DIR}"
                "${tmp_src_name}"
                COMPILE_DEFINITIONS ${CMAKE_REQUIRED_DEFINITIONS}
                ${CHECK_C_SOURCE_COMPILES_ADD_LIBRARIES}
                CMAKE_FLAGS
                -DCOMPILE_DEFINITIONS:STRING=${MACRO_CHECK_FUNCTION_DEFINITIONS}
                -DCMAKE_SKIP_RPATH:BOOL=${CMAKE_SKIP_RPATH}
                "${CHECK_C_SOURCE_COMPILES_ADD_INCLUDES}"
                COMPILE_OUTPUT_VARIABLE OUTPUT
                RUN_OUTPUT_VARIABLE RUN_OUTPUT)

        # if it did not compile make the return value fail code of 1
        if (NOT ngx_found_COMPILED)
            set(ngx_found_EXITCODE 1)
        endif()

        if ("${ngx_found_EXITCODE}" EQUAL 0)
            set(ngx_found 1 CACHE INTERNAL "Test ngx_found")
        else()
            set(ngx_found "" CACHE INTERNAL "Test ngx_found")
        endif()

    else()
        message(FATAL_ERROR "ngx_feature_run should be 'yes', 'no', or 'value'")
        # do nothing
    endif()

    if (ngx_found EQUAL 1)
        set(ngx_found "yes" PARENT_SCOPE)

        if ("${ngx_feature_run}" STREQUAL "value")
            message(STATUS "ngx: checking for ${ngx_feature} ... ${RUN_OUTPUT}")
            ngx_auto_define("${ngx_feature_name}" "${RUN_OUTPUT}")
        else()
            message(STATUS "ngx: checking for ${ngx_feature} ... found")
            if (NOT "${ngx_feature_name}" STREQUAL "")
                ngx_auto_have("${ngx_feature_name}")
            endif()
        endif()

    else()
        set(ngx_found "no" PARENT_SCOPE)
        message(STATUS "ngx: checking for ${ngx_feature} ... not found")
    endif()

endfunction()

# ngx: auto/cc/conf script

# TODO: is it required? Looks wrong
set(ngx_feature "-Wl,-E switch")
set(ngx_feature_name "")
set(ngx_feature_run "no")
set(ngx_feature_incs "")
set(ngx_feature_path "")
set(ngx_feature_libs "-Wl,-E")
set(ngx_feature_test "")
ngx_auto_feature()
if (${ngx_found} STREQUAL "yes")
    set(MAIN_LINK "-Wl,-E")
endif()


set(ngx_feature "gcc builtin atomic operations")
set(ngx_feature_name "NGX_HAVE_GCC_ATOMIC")
set(ngx_feature_run "yes")
set(ngx_feature_incs "")
set(ngx_feature_path "")
set(ngx_feature_libs "")
set(ngx_feature_test
    "long  n = 0\;"
    "if (!__sync_bool_compare_and_swap(&n, 0, 1))"
    "    return 1\;"
    "if (__sync_fetch_and_add(&n, 1) != 1)"
    "    return 1\;"
    "if (n != 2)"
    "    return 1\;"
    "__sync_synchronize()\;")
ngx_auto_feature()


set(ngx_feature "C99 variadic macros")
set(ngx_feature_name "NGX_HAVE_C99_VARIADIC_MACROS")
set(ngx_feature_run "yes")
set(ngx_feature_incs
    "#include <stdio.h>"
    "#define var(dummy, ...)  sprintf(__VA_ARGS__)")
set(ngx_feature_path "")
set(ngx_feature_libs "")
set(ngx_feature_test
    "char  buf[30]\; buf[0] = '0'\;"
    "var(0, buf, \"%d\", 1)\;"
    "if (buf[0] != '1') return 1")
ngx_auto_feature()


set(ngx_feature "gcc variadic macros")
set(ngx_feature_name "NGX_HAVE_GCC_VARIADIC_MACROS")
set(ngx_feature_run "yes")
set(ngx_feature_incs
    "#include <stdio.h>"
    "#define var(dummy, args...)  sprintf(args)")
set(ngx_feature_path "")
set(ngx_feature_libs "")
set(ngx_feature_test
    "char  buf[30]\; buf[0] = '0'\;"
    "var(0, buf, \"%d\", 1)\;"
    "if (buf[0] != '1') return 1")
ngx_auto_feature()


set(ngx_feature "gcc builtin 64 bit byteswap")
set(ngx_feature_name "NGX_HAVE_GCC_BSWAP64")
set(ngx_feature_run "no")
set(ngx_feature_incs "")
set(ngx_feature_path "")
set(ngx_feature_libs "")
set(ngx_feature_test "if (__builtin_bswap64(0)) return 1")
ngx_auto_feature()

# ngx: auto/headers script

function(ngx_auto_check_include ngx_include)
    unset(ngx_found)
    unset(ngx_found CACHE)
    unset(ngx_found PARENT_SCOPE)

    set(A "")
    set(A "${A}${NGX_INCLUDE_SYS_PARAM_H}\n")
    set(A "${A}#include <${ngx_include}>\n")
    set(A "${A}int main(void) {\n")
    set(A "${A}    return 0;\n")
    set(A "${A}}\n")

    set(CMAKE_REQUIRED_QUIET "YES")
    CHECK_C_SOURCE_COMPILES("${A}" ngx_found)

    if (ngx_found EQUAL 1)
        message(STATUS "ngx: checking for ${ngx_include} ... found")
        string(TOUPPER "${ngx_include}" tmp1)
        string(REPLACE "/" "_" tmp2 "${tmp1}")
        string(REPLACE "." "_" tmp3 "${tmp2}")
        set(ngx_name "${tmp3}")

        ngx_auto_have_headers("NGX_HAVE_${ngx_name}")

        set(NGX_INCLUDE_${ngx_name} "#include <${ngx_include}>\n" PARENT_SCOPE)

    else()
        message(STATUS "ngx: checking for ${ngx_include} ... not found")
    endif()

endfunction()

ngx_auto_check_include("unistd.h")
ngx_auto_check_include("inttypes.h")
ngx_auto_check_include("limits.h")
ngx_auto_check_include("sys/filio.h")
ngx_auto_check_include("sys/param.h")
ngx_auto_check_include("sys/mount.h")
ngx_auto_check_include("sys/statvfs.h")
ngx_auto_check_include("crypt.h")

# ngx: auto/os/conf with immediately auto/os/linux script

add_definitions(-D_GNU_SOURCE -D_FILE_OFFSET_BITS=64)
set(CMAKE_REQUIRED_DEFINITIONS "-D_GNU_SOURCE -D_FILE_OFFSET_BITS=64")
ngx_auto_have_headers("NGX_LINUX")

set(CORE_SRCS ${UNIX_SRCS} ${LINUX_SRCS})

# posix_fadvise64() had been implemented in 2.5.60
if ("${NGX_RELEASE}" VERSION_LESS "2.5.60")
    ngx_auto_nohave("NGX_HAVE_POSIX_FADVISE")
endif()

# epoll, EPOLLET version
set(ngx_feature "epoll")
set(ngx_feature_name "NGX_HAVE_EPOLL")
set(ngx_feature_run "yes")
set(ngx_feature_incs "#include <sys/epoll.h>")
set(ngx_feature_path "")
set(ngx_feature_libs "")
set(ngx_feature_test
    "int efd = 0\;"
    "struct epoll_event ee\;"
    "ee.events = EPOLLIN|EPOLLOUT|EPOLLET\;"
    "ee.data.ptr = NULL\;"
    "(void) ee\;"
    "efd = epoll_create(100)\;"
    "if (efd == -1) return 1\;")
ngx_auto_feature()

if ("${ngx_found}" STREQUAL "yes")
    ngx_auto_have("NGX_HAVE_CLEAR_EVENT")
    set(CORE_SRCS ${CORE_SRCS} ${EPOLL_SRCS})
    set(EVENT_MODULES ${EVENT_MODULES} ${EPOLL_MODULE})
    set(EVENT_FOUND "YES")

    # EPOLLRDHUP appeared in Linux 2.6.17, glibc 2.8
    set(ngx_feature "EPOLLRDHUP")
    set(ngx_feature_name "NGX_HAVE_EPOLLRDHUP")
    set(ngx_feature_run "no")
    set(ngx_feature_incs "#include <sys/epoll.h>")
    set(ngx_feature_path "")
    set(ngx_feature_libs "")
    set(ngx_feature_test
        "int efd = 0, fd = 0\;"
        "struct epoll_event ee\;"
        "ee.events = EPOLLIN|EPOLLRDHUP|EPOLLET\;"
        "ee.data.ptr = NULL\;"
        "epoll_ctl(efd, EPOLL_CTL_ADD, fd, &ee)")
    ngx_auto_feature()

    # EPOLLEXCLUSIVE appeared in Linux 4.5, glibc 2.24
    set(ngx_feature "EPOLLEXCLUSIVE")
    set(ngx_feature_name "NGX_HAVE_EPOLLEXCLUSIVE")
    set(ngx_feature_run "no")
    set(ngx_feature_incs "#include <sys/epoll.h>")
    set(ngx_feature_path "")
    set(ngx_feature_libs "")
    set(ngx_feature_test
        "int efd = 0, fd = 0\;"
        "struct epoll_event ee\;"
        "ee.events = EPOLLIN|EPOLLEXCLUSIVE\;"
        "ee.data.ptr = NULL\;"
        "epoll_ctl(efd, EPOLL_CTL_ADD, fd, &ee)")
    ngx_auto_feature()
endif()

# O_PATH and AT_EMPTY_PATH were introduced in 2.6.39, glibc 2.14
set(ngx_feature "O_PATH")
set(ngx_feature_name "NGX_HAVE_O_PATH")
set(ngx_feature_run "no")
set(ngx_feature_incs
    "#include <sys/types.h>"
    "#include <sys/stat.h>"
    "#include <fcntl.h>")
set(ngx_feature_path "")
set(ngx_feature_libs "")
set(ngx_feature_test
    "int fd\; struct stat sb\;"
    "fd = openat(AT_FDCWD, \".\", O_PATH|O_DIRECTORY|O_NOFOLLOW)\;"
    "if (fstatat(fd, \"\", &sb, AT_EMPTY_PATH) != 0) return 1")
ngx_auto_feature()

# sendfile()
set(ngx_feature "sendfile()")
set(ngx_feature_name "NGX_HAVE_SENDFILE")
set(ngx_feature_run "yes")
set(ngx_feature_incs
    "#include <sys/sendfile.h>"
    "#include <errno.h>")
set(ngx_feature_path "")
set(ngx_feature_libs "")
set(ngx_feature_test
    "int s = 0, fd = 1\;"
    "ssize_t n\; off_t off = 0\;"
    "n = sendfile(s, fd, &off, 1)\;"
    "if (n == -1 && errno == ENOSYS) return 1")
ngx_auto_feature()

if ("${ngx_found}" STREQUAL "yes")
    set(CORE_SRCS ${CORE_SRCS} ${LINUX_SENDFILE_SRCS})
endif()


# sendfile64()
set(ngx_feature "sendfile64()")
set(ngx_feature_name "NGX_HAVE_SENDFILE64")
set(ngx_feature_run "yes")
set(ngx_feature_incs
    "#include <sys/sendfile.h>"
    "#include <errno.h>")
set(ngx_feature_path "")
set(ngx_feature_libs "")
set(ngx_feature_test
    "int s = 0, fd = 1\;"
    "ssize_t n\; off_t off = 0\;"
    "n = sendfile(s, fd, &off, 1)\;"
    "if (n == -1 && errno == ENOSYS) return 1")
ngx_auto_feature()


ngx_auto_check_include("sys/prctl.h")


# prctl(PR_SET_DUMPABLE)
set(ngx_feature "prctl(PR_SET_DUMPABLE)")
set(ngx_feature_name "NGX_HAVE_PR_SET_DUMPABLE")
set(ngx_feature_run "yes")
set(ngx_feature_incs "#include <sys/prctl.h>")
set(ngx_feature_path "")
set(ngx_feature_libs "")
set(ngx_feature_test "if (prctl(PR_SET_DUMPABLE, 1, 0, 0, 0) == -1) return 1")
ngx_auto_feature()


# sched_setaffinity()
set(ngx_feature "sched_setaffinity()")
set(ngx_feature_name "NGX_HAVE_SCHED_SETAFFINITY")
set(ngx_feature_run "no")
set(ngx_feature_incs "#include <sched.h>")
set(ngx_feature_path "")
set(ngx_feature_libs "")
set(ngx_feature_test
    "cpu_set_t mask\;"
    "CPU_ZERO(&mask)\;"
    "sched_setaffinity(0, sizeof(cpu_set_t), &mask)")
ngx_auto_feature()


# crypt_r()
set(ngx_feature "crypt_r()")
set(ngx_feature_name "NGX_HAVE_GNU_CRYPT_R")
set(ngx_feature_run "no")
set(ngx_feature_incs "#include <crypt.h>")
set(ngx_feature_path "")
set(ngx_feature_libs "-lcrypt")
set(ngx_feature_test
    "struct crypt_data  cd\;"
    "crypt_r(\"key\", \"salt\", &cd)\;")
ngx_auto_feature()


ngx_auto_check_include("sys/vfs.h")

# ngx: back to auto/os/conf script

# XXX: targeting x86 which have nonaligned access
ngx_auto_have("NGX_HAVE_NONALIGNED")

# XXX: NGX_CPU_CACHE_LINE is hardcoded to 64
set(NGX_CPU_CACHE_LINE 64)
ngx_auto_define("NGX_CPU_CACHE_LINE" "${NGX_CPU_CACHE_LINE}")

# ngx: auto/unix script

set(ngx_feature "poll()")
set(ngx_feature_name "")
set(ngx_feature_run "no")
set(ngx_feature_incs "#include <poll.h>")
set(ngx_feature_path "")
set(ngx_feature_libs "")
set(ngx_feature_test
    "int  n\; struct pollfd  pl\;"
    "pl.fd = 0\;"
    "pl.events = 0\;"
    "pl.revents = 0\;"
    "n = poll(&pl, 1, 0)\;"
    "if (n == -1) return 1")
ngx_auto_feature()

if ("${ngx_found}" STREQUAL "no")
    set(EVENT_POLL "NONE")
endif()

ngx_append_auto_config("#define NGX_KQUEUE_UDATA_T  (void *)")


set(ngx_feature "crypt()")
set(ngx_feature_name "")
set(ngx_feature_run "no")
set(ngx_feature_incs "")
set(ngx_feature_path "")
set(ngx_feature_libs "")
set(ngx_feature_test "crypt(\"test\", \"salt\")\;")
ngx_auto_feature()


if ("${ngx_found}" STREQUAL "no")
    set(ngx_feature "crypt() in libcrypt")
    set(ngx_feature_name "")
    set(ngx_feature_run "no")
    set(ngx_feature_incs "")
    set(ngx_feature_path "")
    set(ngx_feature_libs "-lcrypt")
    ngx_auto_feature()

    if ("${ngx_found}" STREQUAL "yes")
        set(CRYPT_LIB "-lcrypt")
    endif()
endif()


set(ngx_feature "F_READAHEAD")
set(ngx_feature_name "NGX_HAVE_F_READAHEAD")
set(ngx_feature_run "no")
set(ngx_feature_incs "#include <fcntl.h>")
set(ngx_feature_path "")
set(ngx_feature_libs "")
set(ngx_feature_test "fcntl(0, F_READAHEAD, 1)\;")
ngx_auto_feature()


set(ngx_feature "posix_fadvise()")
set(ngx_feature_name "NGX_HAVE_POSIX_FADVISE")
set(ngx_feature_run "no")
set(ngx_feature_incs "#include <fcntl.h>")
set(ngx_feature_path "")
set(ngx_feature_libs "")
set(ngx_feature_test "posix_fadvise(0, 0, 0, POSIX_FADV_SEQUENTIAL)\;")
ngx_auto_feature()


set(ngx_feature "O_DIRECT")
set(ngx_feature_name "NGX_HAVE_O_DIRECT")
set(ngx_feature_run "no")
set(ngx_feature_incs "#include <fcntl.h>")
set(ngx_feature_path "")
set(ngx_feature_libs "")
set(ngx_feature_test "fcntl(0, F_SETFL, O_DIRECT)\;")
ngx_auto_feature()


if ("${ngx_found}" STREQUAL "yes") # and system is Linux
    ngx_auto_have("NGX_HAVE_ALIGNED_DIRECTIO")
endif()

set(ngx_feature "F_NOCACHE")
set(ngx_feature_name "NGX_HAVE_F_NOCACHE")
set(ngx_feature_run "no")
set(ngx_feature_incs "#include <fcntl.h>")
set(ngx_feature_path "")
set(ngx_feature_libs "")
set(ngx_feature_test "fcntl(0, F_NOCACHE, 1)\;")
ngx_auto_feature()


set(ngx_feature "directio()")
set(ngx_feature_name "NGX_HAVE_DIRECTIO")
set(ngx_feature_run "no")
set(ngx_feature_incs
    "#include <sys/types.h>"
    "#include <sys/fcntl.h>")
set(ngx_feature_path "")
set(ngx_feature_libs "")
set(ngx_feature_test "directio(0, DIRECTIO_ON)\;")
ngx_auto_feature()


set(ngx_feature "statfs()")
set(ngx_feature_name "NGX_HAVE_STATFS")
set(ngx_feature_run "no")
set(ngx_feature_incs
    "${NGX_INCLUDE_SYS_PARAM_H}"
    "${NGX_INCLUDE_SYS_MOUNT_H}"
    "${NGX_INCLUDE_SYS_VFS_H}")
set(ngx_feature_path "")
set(ngx_feature_libs "")
set(ngx_feature_test
    "struct statfs  fs\;"
    "statfs(\".\", &fs)\;")
ngx_auto_feature()


set(ngx_feature "statvfs()")
set(ngx_feature_name "NGX_HAVE_STATVFS")
set(ngx_feature_run "no")
set(ngx_feature_incs
    "#include <sys/types.h>"
    "#include <sys/statvfs.h>")
set(ngx_feature_path "")
set(ngx_feature_libs "")
set(ngx_feature_test
    "struct statvfs  fs\;"
    "statvfs(\".\", &fs)\;")
ngx_auto_feature()


set(ngx_feature "dlopen()")
set(ngx_feature_name "NGX_HAVE_DLOPEN")
set(ngx_feature_run "no")
set(ngx_feature_incs "#include <dlfcn.h>")
set(ngx_feature_path "")
set(ngx_feature_libs "")
set(ngx_feature_test
    "dlopen(NULL, RTLD_NOW | RTLD_GLOBAL)\; dlsym(NULL, \"\")")
ngx_auto_feature()


if ("${ngx_found}" STREQUAL "no")
    set(ngx_feature "dlopen() in libdl")
    set(ngx_feature_libs "-ldl")
    ngx_auto_feature()

    if ("${ngx_found}" STREQUAL "yes")
        set(CORE_LIBS ${CORE_LIBS} "-ldl")
        set(NGX_LIBDL "-ldl")
    endif()
endif()


set(ngx_feature "sched_yield()")
set(ngx_feature_name "NGX_HAVE_SCHED_YIELD")
set(ngx_feature_run "no")
set(ngx_feature_incs "#include <sched.h>")
set(ngx_feature_path "")
set(ngx_feature_libs "")
set(ngx_feature_test "sched_yield()")
ngx_auto_feature()


if ("${ngx_found}" STREQUAL "no")
    set(ngx_feature "sched_yield() in librt")
    set(ngx_feature_libs "-lrt")
    ngx_auto_feature()

    if ("${ngx_found}" STREQUAL "yes")
        set(CORE_LIBS ${CORE_LIBS} -lrt)
    endif()
endif()


set(ngx_feature "SO_SETFIB")
set(ngx_feature_name "NGX_HAVE_SETFIB")
set(ngx_feature_run "no")
set(ngx_feature_incs "#include <sys/socket.h>")
set(ngx_feature_path "")
set(ngx_feature_libs "")
set(ngx_feature_test "setsockopt(0, SOL_SOCKET, SO_SETFIB, NULL, 0)")
ngx_auto_feature()


set(ngx_feature "SO_REUSEPORT")
set(ngx_feature_name "NGX_HAVE_REUSEPORT")
set(ngx_feature_run "no")
set(ngx_feature_incs "#include <sys/socket.h>")
set(ngx_feature_path "")
set(ngx_feature_libs "")
set(ngx_feature_test "setsockopt(0, SOL_SOCKET, SO_REUSEPORT, NULL, 0)")
ngx_auto_feature()


set(ngx_feature "SO_ACCEPTFILTER")
set(ngx_feature_name "NGX_HAVE_DEFERRED_ACCEPT")
set(ngx_feature_run "no")
set(ngx_feature_incs "#include <sys/socket.h>")
set(ngx_feature_path "")
set(ngx_feature_libs "")
set(ngx_feature_test "setsockopt(0, SOL_SOCKET, SO_ACCEPTFILTER, NULL, 0)")
ngx_auto_feature()


# NetBSD bind to any address for transparent proxying
set(ngx_feature "SO_BINDANY")
set(ngx_feature_name "NGX_HAVE_TRANSPARENT_PROXY")
set(ngx_feature_run "no")
set(ngx_feature_incs "#include <sys/socket.h>")
set(ngx_feature_path "")
set(ngx_feature_libs "")
set(ngx_feature_test "setsockopt(0, SOL_SOCKET, SO_BINDANY, NULL, 0)")
ngx_auto_feature()


# Linux IP_BIND_ADDRESS_NO_PORT
set(ngx_feature "IP_BIND_ADDRESS_NO_PORT")
set(ngx_feature_name "NGX_HAVE_IP_BIND_ADDRESS_NO_PORT")
set(ngx_feature_run "no")
set(ngx_feature_incs
    "#include <sys/socket.h>"
    "#include <netinet/in.h>")
set(ngx_feature_path "")
set(ngx_feature_libs "")
set(ngx_feature_test
    "setsockopt(0, IPPROTO_IP, IP_BIND_ADDRESS_NO_PORT, NULL, 0)")
ngx_auto_feature()


# Linux transparent proxying
set(ngx_feature "IP_TRANSPARENT")
set(ngx_feature_name "NGX_HAVE_TRANSPARENT_PROXY")
set(ngx_feature_run "no")
set(ngx_feature_incs
    "#include <sys/socket.h>"
    "#include <netinet/in.h>")
set(ngx_feature_path "")
set(ngx_feature_libs "")
set(ngx_feature_test "setsockopt(0, IPPROTO_IP, IP_TRANSPARENT, NULL, 0)")
ngx_auto_feature()


# FreeBSD bind to any address for transparent proxying
set(ngx_feature "IP_BINDANY")
set(ngx_feature_name "NGX_HAVE_TRANSPARENT_PROXY")
set(ngx_feature_run "no")
set(ngx_feature_incs
    "#include <sys/socket.h>"
    "#include <netinet/in.h>")
set(ngx_feature_path "")
set(ngx_feature_libs "")
set(ngx_feature_test "setsockopt(0, IPPROTO_IP, IP_BINDANY, NULL, 0)")
ngx_auto_feature()


# BSD way to get IPv4 datagram destination address
set(ngx_feature "IP_RECVDSTADDR")
set(ngx_feature_name "NGX_HAVE_IP_RECVDSTADDR")
set(ngx_feature_run "no")
set(ngx_feature_incs
    "#include <sys/socket.h>"
    "#include <netinet/in.h>")
set(ngx_feature_path "")
set(ngx_feature_libs "")
set(ngx_feature_test "setsockopt(0, IPPROTO_IP, IP_RECVDSTADDR, NULL, 0)")
ngx_auto_feature()


# Linux way to get IPv4 datagram destination address
set(ngx_feature "IP_PKTINFO")
set(ngx_feature_name "NGX_HAVE_IP_PKTINFO")
set(ngx_feature_run "no")
set(ngx_feature_incs
    "#include <sys/socket.h>"
    "#include <netinet/in.h>")
set(ngx_feature_path "")
set(ngx_feature_libs "")
set(ngx_feature_test "setsockopt(0, IPPROTO_IP, IP_PKTINFO, NULL, 0)")
ngx_auto_feature()


# RFC 3542 way to get IPv6 datagram destination address
set(ngx_feature "IPV6_RECVPKTINFO")
set(ngx_feature_name "NGX_HAVE_IPV6_RECVPKTINFO")
set(ngx_feature_run "no")
set(ngx_feature_incs
    "#include <sys/socket.h>"
    "#include <netinet/in.h>")
set(ngx_feature_path "")
set(ngx_feature_libs "")
set(ngx_feature_test "setsockopt(0, IPPROTO_IPV6, IPV6_RECVPKTINFO, NULL, 0)")
ngx_auto_feature()


set(ngx_feature "TCP_DEFER_ACCEPT")
set(ngx_feature_name "NGX_HAVE_DEFERRED_ACCEPT")
set(ngx_feature_run "no")
set(ngx_feature_incs
    "#include <sys/socket.h>"
    "#include <netinet/in.h>"
    "#include <netinet/tcp.h>")
set(ngx_feature_path "")
set(ngx_feature_libs "")
set(ngx_feature_test "setsockopt(0, IPPROTO_TCP, TCP_DEFER_ACCEPT, NULL, 0)")
ngx_auto_feature()


set(ngx_feature "TCP_KEEPIDLE")
set(ngx_feature_name "NGX_HAVE_KEEPALIVE_TUNABLE")
set(ngx_feature_run "no")
set(ngx_feature_incs
    "#include <sys/socket.h>"
    "#include <netinet/in.h>"
    "#include <netinet/tcp.h>")
set(ngx_feature_path "")
set(ngx_feature_libs "")
set(ngx_feature_test
    "setsockopt(0, IPPROTO_TCP, TCP_KEEPIDLE, NULL, 0)\;"
    "setsockopt(0, IPPROTO_TCP, TCP_KEEPINTVL, NULL, 0)\;"
    "setsockopt(0, IPPROTO_TCP, TCP_KEEPCNT, NULL, 0)")
ngx_auto_feature()


set(ngx_feature "TCP_FASTOPEN")
set(ngx_feature_name "NGX_HAVE_TCP_FASTOPEN")
set(ngx_feature_run "no")
set(ngx_feature_incs
    "#include <sys/socket.h>"
    "#include <netinet/in.h>"
    "#include <netinet/tcp.h>")
set(ngx_feature_path "")
set(ngx_feature_libs "")
set(ngx_feature_test "setsockopt(0, IPPROTO_TCP, TCP_FASTOPEN, NULL, 0)")
ngx_auto_feature()


set(ngx_feature "TCP_INFO")
set(ngx_feature_name "NGX_HAVE_TCP_INFO")
set(ngx_feature_run "no")
set(ngx_feature_incs
    "#include <sys/socket.h>"
    "#include <netinet/in.h>"
    "#include <netinet/tcp.h>")
set(ngx_feature_path "")
set(ngx_feature_libs "")
set(ngx_feature_test
    "socklen_t optlen = sizeof(struct tcp_info)\;"
    "struct tcp_info ti\;"
    "ti.tcpi_rtt = 0\;"
    "ti.tcpi_rttvar = 0\;"
    "ti.tcpi_snd_cwnd = 0\;"
    "ti.tcpi_rcv_space = 0\;"
    "getsockopt(0, IPPROTO_TCP, TCP_INFO, &ti, &optlen)")
ngx_auto_feature()


set(ngx_feature "accept4()")
set(ngx_feature_name "NGX_HAVE_ACCEPT4")
set(ngx_feature_run "no")
set(ngx_feature_incs "#include <sys/socket.h>")
set(ngx_feature_path "")
set(ngx_feature_libs "")
set(ngx_feature_test "accept4(0, NULL, NULL, SOCK_NONBLOCK)")
ngx_auto_feature()

if ("${NGX_FILE_AIO}" STREQUAL "YES")

    set(ngx_feature "kqueue AIO support")
    set(ngx_feature_name "NGX_HAVE_FILE_AIO")
    set(ngx_feature_run "no")
    set(ngx_feature_incs "#include <aio.h>")
    set(ngx_feature_path "")
    set(ngx_feature_libs "")
    set(ngx_feature_test
        "struct aiocb  iocb\;"
        "iocb.aio_sigevent.sigev_notify = SIGEV_KEVENT\;"
        "(void) aio_read(&iocb)")
    ngx_auto_feature()

    if ("${ngx_found}" STREQUAL "yes")
        set(CORE_SRCS ${CORE_SRCS} ${FILE_AIO_SRCS})
    endif()

    if ("${ngx_found}" STREQUAL "no")
        set(ngx_feature "Linux AIO support")
        set(ngx_feature_name "NGX_HAVE_FILE_AIO")
        set(ngx_feature_run "no")
        set(ngx_feature_incs
            "#include <linux/aio_abi.h>"
            "#include <sys/eventfd.h>")
        set(ngx_feature_path "")
        set(ngx_feature_libs "")
        set(ngx_feature_test
            "struct iocb  iocb\;"
            "iocb.aio_lio_opcode = IOCB_CMD_PREAD\;"
            "iocb.aio_flags = IOCB_FLAG_RESFD\;"
            "iocb.aio_resfd = -1\;"
            "(void) iocb\;"
            "(void) eventfd(0, 0)")
        ngx_auto_feature()

        if ("${ngx_found}" STREQUAL "yes")
            ngx_auto_have("NGX_HAVE_EVENTFD")
            ngx_auto_have("NGX_HAVE_SYS_EVENTFD_H")
            set(CORE_SRCS ${CORE_SRCS} ${LINUX_AIO_SRCS})
        endif()
    endif()

    if ("${ngx_found}" STREQUAL "no")
        set(ngx_feature "Linux AIO support (SYS_eventfd)")
        set(ngx_feature_incs
            "#include <linux/aio_abi.h>"
            "#include <sys/syscall.h>")
        set(ngx_feature_test
            "struct iocb  iocb\;"
            "iocb.aio_lio_opcode = IOCB_CMD_PREAD\;"
            "iocb.aio_flags = IOCB_FLAG_RESFD\;"
            "iocb.aio_resfd = -1\;"
            "(void) iocb\;"
            "(void) SYS_eventfd")
        ngx_auto_feature()

        if ("${ngx_found}" STREQUAL "yes")
            ngx_auto_have("NGX_HAVE_EVENTFD")
            set(CORE_SRCS ${CORE_SRCS} $PLINUX_AIO_SRCS})
        endif()
    endif()

    if ("${ngx_found}" STREQUAL "no")
        message(FATAL_ERROR
                "file AIO is supported on FreeBSD 4.3+ and Linux 2.6.22+ only")
    endif()

else()

    set(ngx_feature "eventfd()")
    set(ngx_feature_name "NGX_HAVE_EVENTFD")
    set(ngx_feature_run "no")
    set(ngx_feature_incs "#include <sys/eventfd.h>")
    set(ngx_feature_path "")
    set(ngx_feature_libs "")
    set(ngx_feature_test "(void) eventfd(0, 0)")
    ngx_auto_feature()

    if ("${ngx_found}" STREQUAL "yes")
        ngx_auto_have("NGX_HAVE_SYS_EVENTFD_H")
    endif()

    if ("${ngx_found}" STREQUAL "no")
        set(ngx_feature "eventfd() (SYS_eventfd)")
        set(ngx_feature_incs "#include <sys/syscall.h>")
        set(ngx_feature_test "(void) SYS_eventfd")
        ngx_auto_feature()
    endif()
endif()


ngx_auto_have("NGX_HAVE_UNIX_DOMAIN")

set(ngx_feature_libs "")


# C types

function(ngx_auto_types_sizeof ngx_type)
    set(STATUS_PREFIX "checking for ${ngx_type} ...")

    set(CMAKE_EXTRA_INCLUDE_FILES "signal.h")

    # be quiet
    set(CMAKE_REQUIRED_QUIET "YES")

    # some internal knowledge to make function work multiple times
    unset(AA)
    unset(HAVE_AA)
    unset(AA CACHE)
    unset(HAVE_AA CACHE)

    # actual type size check
    check_type_size("${ngx_type}" AA)
    set(ngx_size ${AA})
    set(ngx_size ${AA} PARENT_SCOPE)

    if ("${ngx_size}" STREQUAL "4")
        message(STATUS "${STATUS_PREFIX} ${ngx_size} bytes")
        set(ngx_max_value "2147483647" PARENT_SCOPE)
        set(ngx_max_len "(sizeof(\"-2147483648\") - 1)" PARENT_SCOPE)

    elseif ("${ngx_size}" STREQUAL "8")
        message(STATUS "${STATUS_PREFIX} ${ngx_size} bytes")
        set(ngx_max_value "9223372036854775807LL" PARENT_SCOPE)
        set(ngx_max_len "(sizeof(\"-9223372036854775808\") - 1)" PARENT_SCOPE)

    else()
        message(FATAL_ERROR "${STATUS_PREFIX} failed")
    endif()

endfunction()


ngx_auto_types_sizeof("int")

ngx_auto_types_sizeof("long")

ngx_auto_types_sizeof("long long")

ngx_auto_types_sizeof("void *")
ngx_auto_define("NGX_PTR_SIZE" "${ngx_size}")

# POSIX types
set(NGX_INCLUDE_AUTO_CONFIG_H "#include \"ngx_auto_config.h\"")

ngx_auto_types_sizeof("sig_atomic_t")
ngx_auto_define("NGX_SIG_ATOMIC_T_SIZE" "${ngx_size}")


TEST_BIG_ENDIAN(SYSTEM_IS_BIG_ENDIAN)
if (${SYSTEM_IS_BIG_ENDIAN} EQUAL 0)
    ngx_auto_have("NGX_HAVE_LITTLE_ENDIAN")
endif()


ngx_auto_types_sizeof("size_t")
ngx_auto_define("NGX_MAX_SIZE_T_VALUE" "${ngx_max_value}")
ngx_auto_define("NGX_SIZE_T_LEN" "${ngx_max_len}")

ngx_auto_types_sizeof("off_t")
ngx_auto_define("NGX_MAX_OFF_T_VALUE" "${ngx_max_value}")
ngx_auto_define("NGX_OFF_T_LEN" "${ngx_max_len}")

ngx_auto_types_sizeof("time_t")
ngx_auto_define("NGX_TIME_T_SIZE" "${ngx_size}")
ngx_auto_define("NGX_TIME_T_LEN" "${ngx_max_len}")
ngx_auto_define("NGX_MAX_TIME_T_VALUE" "${ngx_max_value}")


# syscalls, libc calls and some features
set(ngx_feature "AF_INET6")
set(ngx_feature_name "NGX_HAVE_INET6")
set(ngx_feature_run "no")
set(ngx_feature_incs
    "#include <sys/socket.h>"
    "#include <netinet/in.h>"
    "#include <arpa/inet.h>")
set(ngx_feature_path "")
set(ngx_feature_libs "")
set(ngx_feature_test
    "struct sockaddr_in6  sin6\;"
    "sin6.sin6_family = AF_INET6\;"
    "(void) sin6")
ngx_auto_feature()


set(ngx_feature "setproctitle()")
set(ngx_feature_name "NGX_HAVE_SETPROCTITLE")
set(ngx_feature_run "no")
set(ngx_feature_incs "#include <stdlib.h>")
set(ngx_feature_path "")
set(ngx_feature_libs "${NGX_SETPROCTITLE_LIB}")
set(ngx_feature_test "setproctitle(\"test\")\;")
ngx_auto_feature()


set(ngx_feature "pread()")
set(ngx_feature_name "NGX_HAVE_PREAD")
set(ngx_feature_run "no")
set(ngx_feature_incs "")
set(ngx_feature_path "")
set(ngx_feature_libs "")
set(ngx_feature_test
    "char buf[1]\; ssize_t n\; n = pread(0, buf, 1, 0)\;"
    "if (n == -1) return 1")
ngx_auto_feature()


set(ngx_feature "pwrite()")
set(ngx_feature_name "NGX_HAVE_PWRITE")
set(ngx_feature_run "no")
set(ngx_feature_incs "")
set(ngx_feature_path "")
set(ngx_feature_libs "")
set(ngx_feature_test
    "char buf[1]\; ssize_t n\; n = pwrite(1, buf, 1, 0)\;"
    "if (n == -1) return 1")
ngx_auto_feature()


# pwritev() was introduced in FreeBSD 6 and Linux 2.6.30, glibc 2.10
set(ngx_feature "pwritev()")
set(ngx_feature_name "NGX_HAVE_PWRITEV")
set(ngx_feature_run "no")
set(ngx_feature_incs "#include <sys/uio.h>")
set(ngx_feature_path "")
set(ngx_feature_libs "")
set(ngx_feature_test
    "char buf[1]\; struct iovec vec[1]\; ssize_t n\;"
    "vec[0].iov_base = buf\;"
    "vec[0].iov_len = 1\;"
    "n = pwritev(1, vec, 1, 0)\;"
    "if (n == -1) return 1")
ngx_auto_feature()


set(ngx_feature "sys_nerr")
set(ngx_feature_name "NGX_SYS_NERR")
set(ngx_feature_run "value")
set(ngx_feature_incs
    "#include <errno.h>"
    "#include <stdio.h>")
set(ngx_feature_path "")
set(ngx_feature_libs "")
set(ngx_feature_test "printf(\"%d\", sys_nerr)\;")
ngx_auto_feature()


set(ngx_feature "localtime_r()")
set(ngx_feature_name "NGX_HAVE_LOCALTIME_R")
set(ngx_feature_run "no")
set(ngx_feature_incs "#include <time.h>")
set(ngx_feature_path "")
set(ngx_feature_libs "")
set(ngx_feature_test "struct tm t\; time_t c=0\; localtime_r(&c, &t)")
ngx_auto_feature()


set(ngx_feature "posix_memalign()")
set(ngx_feature_name "NGX_HAVE_POSIX_MEMALIGN")
set(ngx_feature_run "no")
set(ngx_feature_incs "#include <stdlib.h>")
set(ngx_feature_path "")
set(ngx_feature_libs "")
set(ngx_feature_test
    "void *p\; int n\; n = posix_memalign(&p, 4096, 4096)\;"
    "if (n != 0) return 1")
ngx_auto_feature()


set(ngx_feature "memalign()")
set(ngx_feature_name "NGX_HAVE_MEMALIGN")
set(ngx_feature_run "no")
set(ngx_feature_incs
    "#include <stdlib.h>"
    "#include <malloc.h>")
set(ngx_feature_path "")
set(ngx_feature_libs "")
set(ngx_feature_test
    "void *p\; p = memalign(4096, 4096)\;"
    "if (p == NULL) return 1")
ngx_auto_feature()


set(ngx_feature "mmap(MAP_ANON|MAP_SHARED)")
set(ngx_feature_name "NGX_HAVE_MAP_ANON")
set(ngx_feature_run "yes")
set(ngx_feature_incs "#include <sys/mman.h>")
set(ngx_feature_path "")
set(ngx_feature_libs "")
set(ngx_feature_test
    "void *p\;"
    "p = mmap(NULL, 4096, PROT_READ|PROT_WRITE,"
    "         MAP_ANON|MAP_SHARED, -1, 0)\;"
    "if (p == MAP_FAILED) return 1\;")
ngx_auto_feature()


set(ngx_feature "mmap(\"/dev/zero\", MAP_SHARED)")
set(ngx_feature_name "NGX_HAVE_MAP_DEVZERO")
set(ngx_feature_run "yes")
set(ngx_feature_incs
    "#include <sys/mman.h>"
    "#include <sys/stat.h>"
    "#include <fcntl.h>")
set(ngx_feature_path "")
set(ngx_feature_libs "")
set(ngx_feature_test
    "void *p\; int  fd\;"
    "fd = open(\"/dev/zero\", O_RDWR)\;"
    "p = mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_SHARED, fd, 0)\;"
    "if (p == MAP_FAILED) return 1\;")
ngx_auto_feature()


set(ngx_feature "System V shared memory")
set(ngx_feature_name "NGX_HAVE_SYSVSHM")
set(ngx_feature_run "yes")
set(ngx_feature_incs
    "#include <sys/ipc.h>"
    "#include <sys/shm.h>")
set(ngx_feature_path "")
set(ngx_feature_libs "")
set(ngx_feature_test
    "int  id\;"
    "id = shmget(IPC_PRIVATE, 4096, (SHM_R|SHM_W|IPC_CREAT))\;"
    "if (id == -1) return 1\;"
    "shmctl(id, IPC_RMID, NULL)\;")
ngx_auto_feature()


set(ngx_feature "POSIX semaphores")
set(ngx_feature_name "NGX_HAVE_POSIX_SEM")
set(ngx_feature_run "yes")
set(ngx_feature_incs "#include <semaphore.h>")
set(ngx_feature_path "")
set(ngx_feature_libs "")
set(ngx_feature_test
    "sem_t  sem\;"
    "if (sem_init(&sem, 1, 0) == -1) return 1\;"
    "sem_destroy(&sem)\;")
ngx_auto_feature()


if ("${ngx_found}" STREQUAL "no")
    # Linux has POSIX semaphores in libpthread
    set(ngx_feature "POSIX semaphores in libpthread")
    set(ngx_feature_libs "-lpthread")
    ngx_auto_feature()

    if ("${ngx_found}" STREQUAL "yes")
        set(CORE_LIBS ${CORE_LIBS} "-lpthread")
    endif()
endif()


set(ngx_feature "struct msghdr.msg_control")
set(ngx_feature_name "NGX_HAVE_MSGHDR_MSG_CONTROL")
set(ngx_feature_run "no")
set(ngx_feature_incs
    "#include <sys/socket.h>"
    "#include <stdio.h>")
set(ngx_feature_path "")
set(ngx_feature_libs "")
set(ngx_feature_test
    "struct msghdr  msg\;"
    "printf(\"%d\", (int) sizeof(msg.msg_control))")
ngx_auto_feature()


set(ngx_feature "ioctl(FIONBIO)")
set(ngx_feature_name "NGX_HAVE_FIONBIO")
set(ngx_feature_run "no")
set(ngx_feature_incs
    "#include <sys/ioctl.h>"
    "#include <stdio.h>"
    "${NGX_INCLUDE_SYS_FILIO_H}")
set(ngx_feature_path "")
set(ngx_feature_libs "")
set(ngx_feature_test "int i = FIONBIO\; printf(\"%d\", i)")
ngx_auto_feature()


set(ngx_feature "struct tm.tm_gmtoff")
set(ngx_feature_name "NGX_HAVE_GMTOFF")
set(ngx_feature_run "no")
set(ngx_feature_incs
    "#include <time.h>"
    "#include <stdio.h>")
set(ngx_feature_path "")
set(ngx_feature_libs "")
set(ngx_feature_test
    "struct tm  tm\; tm.tm_gmtoff = 0\;"
    "printf(\"%d\", (int) tm.tm_gmtoff)")
ngx_auto_feature()


set(ngx_feature "struct dirent.d_namlen")
set(ngx_feature_name "NGX_HAVE_D_NAMLEN")
set(ngx_feature_run "no")
set(ngx_feature_incs
    "#include <dirent.h>"
    "#include <stdio.h>")
set(ngx_feature_path "")
set(ngx_feature_libs "")
set(ngx_feature_test
    "struct dirent  dir\; dir.d_namlen = 0\;"
    "printf(\"%d\", (int) dir.d_namlen)")
ngx_auto_feature()


set(ngx_feature "struct dirent.d_type")
set(ngx_feature_name "NGX_HAVE_D_TYPE")
set(ngx_feature_run "no")
set(ngx_feature_incs
    "#include <dirent.h>"
    "#include <stdio.h>")
set(ngx_feature_path "")
set(ngx_feature_libs "")
set(ngx_feature_test
    "struct dirent  dir\; dir.d_type = DT_REG\;"
    "printf(\"%d\", (int) dir.d_type)")
ngx_auto_feature()


set(ngx_feature "sysconf(_SC_NPROCESSORS_ONLN)")
set(ngx_feature_name "NGX_HAVE_SC_NPROCESSORS_ONLN")
set(ngx_feature_run "no")
set(ngx_feature_incs "")
set(ngx_feature_path "")
set(ngx_feature_libs "")
set(ngx_feature_test "sysconf(_SC_NPROCESSORS_ONLN)")
ngx_auto_feature()


set(ngx_feature "openat(), fstatat()")
set(ngx_feature_name "NGX_HAVE_OPENAT")
set(ngx_feature_run "no")
set(ngx_feature_incs
    "#include <sys/types.h>"
    "#include <sys/stat.h>"
    "#include <fcntl.h>")
set(ngx_feature_path "")
set(ngx_feature_libs "")
set(ngx_feature_test
    "struct stat sb\;"
    "openat(AT_FDCWD, \".\", O_RDONLY|O_NOFOLLOW)\;"
    "fstatat(AT_FDCWD, \".\", &sb, AT_SYMLINK_NOFOLLOW)\;")
ngx_auto_feature()


set(ngx_feature "getaddrinfo()")
set(ngx_feature_name "NGX_HAVE_GETADDRINFO")
set(ngx_feature_run "no")
set(ngx_feature_incs
    "#include <sys/types.h>"
    "#include <sys/socket.h>"
    "#include <netdb.h>")
set(ngx_feature_path "")
set(ngx_feature_libs "")
set(ngx_feature_test
    "struct addrinfo *res\;"
    "if (getaddrinfo(\"localhost\", NULL, NULL, &res) != 0) return 1\;"
    "freeaddrinfo(res)")
ngx_auto_feature()

# ngx: auto/threads script

if ("${USE_THREADS}" STREQUAL "YES")
    ngx_auto_have("NGX_THREADS")
    set(CORE_SRCS ${CORE_SRCS} ${THREAD_POOL_SRCS})
    set(CORE_LIBS ${CORE_LIBS} "-lpthread")
endif()

# ngx: auto/modules script

if ("${EVENT_SELECT}" STREQUAL "NO" AND "${EVENT_FOUND}" STREQUAL "NO")
    set(EVENT_SELECT "YES")
endif()

if ("${EVENT_SELECT}" STREQUAL "YES")
    ngx_auto_have("NGX_HAVE_SELECT")
    set(CORE_SRCS ${CORE_SRCS} ${SELECT_SRCS})
    set(EVENT_MODULES ${EVENT_MODULES} ${SELECT_MODULE})
endif()


if ("${EVENT_POLL}" STREQUAL "NO" AND "${EVENT_FOUND}" STREQUAL "NO")
    set(EVENT_POLL "YES")
endif()

if ("${EVENT_POLL}" STREQUAL "YES")
    ngx_auto_have("NGX_HAVE_POLL")
    set(CORE_SRCS ${CORE_SRCS} ${POLL_SRCS})
    set(EVENT_MODULES ${EVENT_MODULES} ${POLL_MODULE})
endif()


if ("${NGX_TEST_BUILD_EPOLL}" STREQUAL "YES")
    ngx_auto_have("NGX_HAVE_EPOLL")
    ngx_auto_have("NGX_HAVE_EPOLLRDHUP")
    ngx_auto_have("NGX_HAVE_EPOLLEXCLUSIVE")
    ngx_auto_have("NGX_HAVE_EVENTFD")
    ngx_auto_have("NGX_TEST_BUILD_EPOLL")
    set(EVENT_MODULES ${EVENT_MODULES} ${EPOLL_MODULE})
    set(CORE_SRCS ${CORE_SRCS} ${EPOLL_SRCS})
endif()


set(HTTP_MODULES "")
set(HTTP_DEPS "")
set(HTTP_INCS "")

function(ngx_auto_module)
    set(ngx_var "${ngx_module_type}")

    if ("x${ngx_module_type}" MATCHES "^xHTTP_")
        set(ngx_var "HTTP")
    endif()

    if ("${ngx_module_link}" STREQUAL "DYNAMIC")
        foreach (ngx_module ${ngx_module_name})
            # extract the first name
            break()
        endforeach()

        set(DYNAMIC_MODULES ${DYNAMIC_MODULES} "${ngx_module}" PARENT_SCOPE)
        set(${ngx_module}_SRC ${ngx_module_srcs} PARENT_SCOPE)
        set(${ngx_module}_MODULES ${ngx_module_name} PARENT_SCOPE)

        if ("${ngx_module_order}" STREQUAL "" AND
            ("${ngx_module_type}" STREQUAL "HTTP_FILTER" OR
             "${ngx_module_type}" STREQUAL "HTTP_AUX_FILTER"))

            set(${ngx_module}_ORDER
                "${ngx_module_name} ngx_http_copy_filter_module" PARENT_SCOPE)
        else()
            set(${ngx_module}_ORDER "${ngx_module_order}" PARENT_SCOPE)
        endif()

        set(libs "")
        foreach(lib ${ngx_module_libs})
            if ("${lib}" STREQUAL "LIBXSLT" OR "${lib}" STREQUAL "LIBGD" OR
                "${lib}" STREQUAL "GEOIP" OR "${lib}" STREQUAL "PERL")

                if (${USE_${lib}} STREQUAL "NO")
                    set(USE_${lib} "DYNAMIC" PARENT_SCOPE)
                endif()

            elseif ("${lib}" STREQUAL "PCRE" OR "${lib}" STREQUAL "OPENSSL" OR
                    "${lib}" STREQUAL "ZLIB")

                set(USE_${lib} "YES" PARENT_SCOPE)

            elseif ("${lib}" STREQUAL "MD5" OR "${lib}" STREQUAL "SHA1")

                # obsolete

            else()
                set(libs ${libs} "${lib}")
            endif()
        endforeach()

        set(${ngx_module}_LIBS ${libs} PARENT_SCOPE)

    elseif ("${ngx_module_link}" STREQUAL "YES")

        set(${ngx_module_type}_MODULES ${${ngx_module_type}_MODULES}
            ${ngx_module_name} PARENT_SCOPE)

        set(${ngx_var}_SRCS ${${ngx_var}_SRCS} ${ngx_module_srcs} PARENT_SCOPE)

        foreach(lib ${ngx_module_libs})
            if ("x${lib}" STREQUAL "xPCRE" OR "x${lib}" STREQUAL "xOPENSSL" OR
                "x${lib}" STREQUAL "xZLIB" OR "x${lib}" STREQUAL "xLIBXSLT" OR
                "x${lib}" STREQUAL "xLIBGD" OR "x${lib}" STREQUAL "xPERL" OR
                "x${lib}" STREQUAL "xGEOIP")

                set(USE_${lib} "YES" PARENT_SCOPE)

            elseif ("${lib}" STREQUAL "MD5" OR "${lib}" STREQUAL "SHA1")

                # obsolete

            else()
                set(CORE_LIBS ${CORE_LIBS} ${lib} PARENT_SCOPE)
            endif()
        endforeach()

    elseif ("${ngx_module_link}" STREQUAL "ADDON")

        set(${ngx_module_type}_MODULES ${${ngx_module_type}_MODULES}
            ${ngx_module_name} PARENT_SCOPE)

        set(NGX_ADDON_SRCS ${NGX_ADDON_SRCS} ${ngx_module_srcs} PARENT_SCOPE)

        foreach (lib ${ngx_module_libs})
            if ("${lib}" STREQUAL "PCRE" OR "${lib}" STREQUAL "OPENSSL" OR
                "${lib}" STREQUAL "ZLIB" OR "${lib}" STREQUAL "LIBXSLT" OR
                "${lib}" STREQUAL "LIBGD" OR "${lib}" STREQUAL "PERL" OR
                "${lib}" STREQUAL "GEOIP")

                set(USE_${lib} "YES" PARENT_SCOPE)

            elseif ("${lib}" STREQUAL "" OR "${lib}" STREQUAL "")

                # obsolete

            else()
                set(CORE_LIBS ${CORE_LIBS} ${lib} PARENT_SCOPE)
            endif()
        endforeach()
    endif()
endfunction()

set(ngx_module_type "HTTP")
set(ngx_module_name
    ngx_http_module
    ngx_http_core_module
    ngx_http_log_module
    ngx_http_upstream_module
)
set(ngx_module_srcs
    src/http/ngx_http.c
    src/http/ngx_http_core_module.c
    src/http/ngx_http_special_response.c
    src/http/ngx_http_request.c
    src/http/ngx_http_parse.c
    src/http/modules/ngx_http_log_module.c
    src/http/ngx_http_request_body.c
    src/http/ngx_http_variables.c
    src/http/ngx_http_script.c
    src/http/ngx_http_upstream.c
    src/http/ngx_http_upstream_round_robin.c
)
set(ngx_module_libs "")
set(ngx_module_link "YES")
ngx_auto_module()


if (NOT "${HTTP}" STREQUAL "YES")
    ngx_auto_nohave("NGX_CRYPT")
    set(CRYPT_LIB "")
endif()


if ("${HTTP_CACHE}" STREQUAL "YES")
    ngx_auto_have("NGX_HTTP_CACHE")
    set(HTTP_SRCS ${HTTP_SRCS} ${HTTP_FILE_CACHE_SRCS})
endif()


if ("${HTTP_SSI}" STREQUAL "YES")
    set(HTTP_POSTPONE "YES")
endif()


if ("${HTTP_SLICE}" STREQUAL "YES")
    set(HTTP_POSTPONE "YES")
endif()


if ("${HTTP_ADDITION}" STREQUAL "YES")
    set(HTTP_POSTPONE "YES")
endif()


# the module order is important
#     ngx_http_static_module
#     ngx_http_gzip_static_module
#     ngx_http_dav_module
#     ngx_http_autoindex_module
#     ngx_http_index_module
#     ngx_http_random_index_module
#
#     ngx_http_access_module
#     ngx_http_realip_module
#
#
# the filter order is important
#     ngx_http_write_filter
#     ngx_http_header_filter
#     ngx_http_chunked_filter
#     ngx_http_v2_filter
#     ngx_http_range_header_filter
#     ngx_http_gzip_filter
#     ngx_http_postpone_filter
#     ngx_http_ssi_filter
#     ngx_http_charset_filter
#         ngx_http_xslt_filter
#         ngx_http_image_filter
#         ngx_http_sub_filter
#         ngx_http_addition_filter
#         ngx_http_gunzip_filter
#         ngx_http_userid_filter
#         ngx_http_headers_filter
#     ngx_http_copy_filter
#     ngx_http_range_body_filter
#     ngx_http_not_modified_filter
#     ngx_http_slice_filter

set(ngx_module_type "HTTP_FILTER")
set(HTTP_FILTER_MODULES "")

set(ngx_module_order
    ngx_http_static_module
    ngx_http_gzip_static_module
    ngx_http_dav_module
    ngx_http_autoindex_module
    ngx_http_index_module
    ngx_http_random_index_module
    ngx_http_access_module
    ngx_http_realip_module
    ngx_http_write_filter_module
    ngx_http_header_filter_module
    ngx_http_chunked_filter_module
    ngx_http_v2_filter_module
    ngx_http_range_header_filter_module
    ngx_http_gzip_filter_module
    ngx_http_postpone_filter_module
    ngx_http_ssi_filter_module
    ngx_http_charset_filter_module
    ngx_http_xslt_filter_module
    ngx_http_image_filter_module
    ngx_http_sub_filter_module
    ngx_http_addition_filter_module
    ngx_http_gunzip_filter_module
    ngx_http_userid_filter_module
    ngx_http_headers_filter_module
    ngx_http_copy_filter_module
    ngx_http_range_body_filter_module
    ngx_http_not_modified_filter_module
    ngx_http_slice_filter_module
)

set(ngx_module_name "ngx_http_write_filter_module")
set(ngx_module_srcs "src/http/ngx_http_write_filter_module.c")
set(ngx_module_libs "")
set(ngx_module_link "YES")
ngx_auto_module()


set(ngx_module_name "ngx_http_header_filter_module")
set(ngx_module_srcs "src/http/ngx_http_header_filter_module.c")
set(ngx_module_libs "")
set(ngx_module_link "YES")
ngx_auto_module()


set(ngx_module_name "ngx_http_chunked_filter_module")
set(ngx_module_srcs "src/http/modules/ngx_http_chunked_filter_module.c")
set(ngx_module_libs "")
set(ngx_module_link "YES")

ngx_auto_module()


if ("${HTTP_V2}" STREQUAL "YES")
    set(ngx_module_name "ngx_http_v2_filter_module")
    set(ngx_module_srcs "src/http/v2/ngx_http_v2_filter_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_V2}")

    ngx_auto_module()
endif()

if (TRUE)
    set(ngx_module_name "ngx_http_range_header_filter_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_range_filter_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "YES")

    ngx_auto_module()
endif()


if ("${HTTP_GZIP}" STREQUAL "YES")
    ngx_auto_have("NGX_HTTP_GZIP")
    set(USE_ZLIB "YES")

    set(ngx_module_name "ngx_http_gzip_filter_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_gzip_filter_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_GZIP}")

    ngx_auto_module()
endif()

if ("${HTTP_POSTPONE}" STREQUAL "YES")
    set(ngx_module_name "ngx_http_postpone_filter_module")
    set(ngx_module_srcs "src/http/ngx_http_postpone_filter_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_POSTPONE}")

    ngx_auto_module()
endif()

if ("${HTTP_SSI}" STREQUAL "YES")
    ngx_auto_have("NGX_HTTP_SSI")

    set(ngx_module_name "ngx_http_ssi_filter_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_ssi_filter_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_SSI}")

    ngx_auto_module()
endif()

if ("${HTTP_CHARSET}" STREQUAL "YES")
    set(ngx_module_name "ngx_http_charset_filter_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_charset_filter_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_CHARSET}")

    ngx_auto_module()
endif()

if (NOT "${HTTP_XSLT}" STREQUAL "NO")
    set(ngx_module_name "ngx_http_xslt_filter_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_xslt_filter_module.c")
    set(ngx_module_libs "LIBXSLT")
    set(ngx_module_link "${HTTP_XSLT}")

    ngx_auto_module()
endif()

if (NOT "${HTTP_IMAGE_FILTER}" STREQUAL "NO")
    set(ngx_module_name "ngx_http_image_filter_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_image_filter_module.c")
    set(ngx_module_libs "LIBGD")
    set(ngx_module_link "${HTTP_IMAGE_FILTER}")

    ngx_auto_module()
endif()

if ("${HTTP_SUB}" STREQUAL "YES")
    set(ngx_module_name "ngx_http_sub_filter_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_sub_filter_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_SUB}")

    ngx_auto_module()
endif()

if ("${HTTP_ADDITION}" STREQUAL "YES")
    set(ngx_module_name "ngx_http_addition_filter_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_addition_filter_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_ADDITION}")

    ngx_auto_module()
endif()

if ("${HTTP_GUNZIP}" STREQUAL "YES")
    ngx_auto_have("NGX_HTTP_GZIP")
    set(USE_ZLIB "YES")

    set(ngx_module_name "ngx_http_gunzip_filter_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_gunzip_filter_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_GUNZIP}")

    ngx_auto_module()
endif()

if ("${HTTP_USERID}" STREQUAL "YES")
    set(ngx_module_name "ngx_http_userid_filter_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_userid_filter_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_USERID}")

    ngx_auto_module()
endif()

if (TRUE)
    set(ngx_module_name "ngx_http_headers_filter_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_headers_filter_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "YES")

    ngx_auto_module()
endif()


set(ngx_module_type "HTTP_INIT_FILTER")
set(HTTP_INIT_FILTER_MODULES "")

if (TRUE)
    set(ngx_module_name "ngx_http_copy_filter_module")
    set(ngx_module_srcs "src/http/ngx_http_copy_filter_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "YES")

    ngx_auto_module()
endif()

if (TRUE)
    set(ngx_module_name "ngx_http_range_body_filter_module")
    set(ngx_module_srcs "")
    set(ngx_module_libs "")
    set(ngx_module_link "YES")

    ngx_auto_module()
endif()

if (TRUE)
    set(ngx_module_name "ngx_http_not_modified_filter_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_not_modified_filter_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "YES")

    ngx_auto_module()
endif()

if ("${HTTP_SLICE}" STREQUAL "YES")
    set(ngx_module_name "ngx_http_slice_filter_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_slice_filter_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_SLICE}")

    ngx_auto_module()
endif()


set(ngx_module_type "HTTP")

if ("${HTTP_V2}" STREQUAL "YES")
    ngx_auto_have("NGX_HTTP_V2")

    set(ngx_module_name "ngx_http_v2_module")
    set(ngx_module_srcs
        "src/http/v2/ngx_http_v2.c"
        "src/http/v2/ngx_http_v2_table.c"
        "src/http/v2/ngx_http_v2_huff_decode.c"
        "src/http/v2/ngx_http_v2_huff_encode.c"
        "src/http/v2/ngx_http_v2_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_V2}")

    ngx_auto_module()
endif()

if (TRUE)
    set(ngx_module_name "ngx_http_static_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_static_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "YES")

    ngx_auto_module()
endif()

if ("${HTTP_GZIP_STATIC}" STREQUAL "YES")
    ngx_auto_have("NGX_HTTP_GZIP")

    set(ngx_module_name "ngx_http_gzip_static_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_gzip_static_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_GZIP_STATIC}")

    ngx_auto_module()
endif()

if ("${HTTP_DAV}" STREQUAL "YES")
    ngx_auto_have("NGX_HTTP_DAV")

    set(ngx_module_name "ngx_http_dav_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_dav_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_DAV}")

    ngx_auto_module()
endif()

if ("${HTTP_AUTOINDEX}" STREQUAL "YES")
    set(ngx_module_name "ngx_http_autoindex_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_autoindex_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_AUTOINDEX}")

    ngx_auto_module()
endif()

if (TRUE)
    set(ngx_module_name "ngx_http_index_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_index_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "YES")

    ngx_auto_module()
endif()

if ("${HTTP_RANDOM_INDEX}" STREQUAL "YES")
    set(ngx_module_name "ngx_http_random_index_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_random_index_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_RANDOM_INDEX}")

    ngx_auto_module()
endif()

if ("${HTTP_AUTH_REQUEST}" STREQUAL "YES")
    set(ngx_module_name "ngx_http_auth_request_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_auth_request_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_AUTH_REQUEST}")

    ngx_auto_module()
endif()

if ("${HTTP_AUTH_BASIC}" STREQUAL "YES")
    ngx_auto_have("NGX_CRYPT")

    set(ngx_module_name "ngx_http_auth_basic_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_auth_basic_module.c")
    set(ngx_module_libs "${CRYPT_LIB}")
    set(ngx_module_link "${HTTP_AUTH_BASIC}")

    ngx_auto_module()
endif()

if ("${HTTP_ACCESS}" STREQUAL "YES")
    set(ngx_module_name "ngx_http_access_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_access_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_ACCESS}")

    ngx_auto_module()
endif()

if ("${HTTP_LIMIT_CONN}" STREQUAL "YES")
    set(ngx_module_name "ngx_http_limit_conn_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_limit_conn_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_LIMIT_CONN}")

    ngx_auto_module()
endif()

if ("${HTTP_LIMIT_REQ}" STREQUAL "YES")
    set(ngx_module_name "ngx_http_limit_req_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_limit_req_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_LIMIT_REQ}")

    ngx_auto_module()
endif()

if ("${HTTP_REALIP}" STREQUAL "YES")
    ngx_auto_have("NGX_HTTP_REALIP")
    ngx_auto_have("NGX_HTTP_X_FORWARDED_FOR")

    set(ngx_module_name "ngx_http_realip_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_realip_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_REALIP}")

    ngx_auto_module()
endif()

if ("${HTTP_GEO}" STREQUAL "YES")
    ngx_auto_have("NGX_HTTP_X_FORWARDED_FOR")

    set(ngx_module_name "ngx_http_geo_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_geo_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_GEO}")

    ngx_auto_module()
endif()

if (NOT "${HTTP_GEOIP}" STREQUAL "NO")
    ngx_auto_have("NGX_HTTP_X_FORWARDED_FOR")

    set(ngx_module_name "ngx_http_geoip_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_geoip_module.c")
    set(ngx_module_libs "GEOIP")
    set(ngx_module_link "${HTTP_GEOIP}")

    ngx_auto_module()
endif()

if ("${HTTP_MAP}" STREQUAL "YES")
    set(ngx_module_name "ngx_http_map_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_map_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_MAP}")

    ngx_auto_module()
endif()

if ("${HTTP_SPLIT_CLIENTS}" STREQUAL "YES")
    set(ngx_module_name "ngx_http_split_clients_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_split_clients_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_SPLIT_CLIENTS}")

    ngx_auto_module()
endif()

if ("${HTTP_REFERER}" STREQUAL "YES")
    set(ngx_module_name "ngx_http_referer_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_referer_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_REFERER}")

    ngx_auto_module()
endif()

if ("${HTTP_REWRITE}" STREQUAL "YES" AND NOT "${USE_PCRE}" STREQUAL "DISABLED")
    set(USE_PCRE "YES")

    set(ngx_module_name "ngx_http_rewrite_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_rewrite_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_REWRITE}")

    ngx_auto_module()
endif()

if ("${HTTP_SSL}" STREQUAL "YES")
    set(USE_OPENSSL "YES")
    ngx_auto_have("NGX_HTTP_SSL")

    set(ngx_module_name "ngx_http_ssl_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_ssl_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_SSL}")

    ngx_auto_module()
endif()

if ("${HTTP_PROXY}" STREQUAL "YES")
    ngx_auto_have("NGX_HTTP_X_FORWARDED_FOR")

    set(ngx_module_name "ngx_http_proxy_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_proxy_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_PROXY}")

    ngx_auto_module()
endif()

if ("${HTTP_FASTCGI}" STREQUAL "YES")
    set(ngx_module_name "ngx_http_fastcgi_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_fastcgi_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_FASTCGI}")

    ngx_auto_module()
endif()

if ("${HTTP_UWSGI}" STREQUAL "YES")
    set(ngx_module_name "ngx_http_uwsgi_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_uwsgi_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_UWSGI}")

    ngx_auto_module()
endif()

if ("${HTTP_SCGI}" STREQUAL "YES")
    set(ngx_module_name "ngx_http_scgi_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_scgi_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_SCGI}")

    ngx_auto_module()
endif()

if (NOT "${HTTP_PERL}" STREQUAL "NO")
    set(ngx_module_name "ngx_http_perl_module")
    set(ngx_module_srcs "src/http/modules/perl/ngx_http_perl_module.c")
    set(ngx_module_libs "PERL")
    set(ngx_module_link "${HTTP_PERL}")

    ngx_auto_module()
endif()

if ("${HTTP_MEMCACHED}" STREQUAL "YES")
    set(ngx_module_name "ngx_http_memcached_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_memcached_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_MEMCACHED}")

    ngx_auto_module()
endif()

if ("${HTTP_EMPTY_GIF}" STREQUAL "YES")
    set(ngx_module_name "ngx_http_empty_gif_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_empty_gif_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_EMPTY_GIF}")

    ngx_auto_module()
endif()

if ("${HTTP_BROWSER}" STREQUAL "YES")
    set(ngx_module_name "ngx_http_browser_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_browser_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_BROWSER}")

    ngx_auto_module()
endif()

if ("${HTTP_SECURE_LINK}" STREQUAL "YES")
    set(ngx_module_name "ngx_http_secure_link_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_secure_link_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_SECURE_LINK}")

    ngx_auto_module()
endif()

if ("${HTTP_DEGRADATION}" STREQUAL "YES")
    ngx_auto_have("NGX_HTTP_DEGRADATION")

    set(ngx_module_name "ngx_http_degradation_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_degradation_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_DEGRADATION}")

    ngx_auto_module()
endif()

if ("${HTTP_FLV}" STREQUAL "YES")
    set(ngx_module_name "ngx_http_flv_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_flv_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_FLV}")

    ngx_auto_module()
endif()

if ("${HTTP_MP4}" STREQUAL "YES")
    set(ngx_module_name "ngx_http_mp4_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_mp4_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_MP4}")

    ngx_auto_module()
endif()

if ("${HTTP_UPSTREAM_HASH}" STREQUAL "YES")
    set(ngx_module_name "ngx_http_upstream_hash_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_upstream_hash_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_UPSTREAM_HASH}")

    ngx_auto_module()
endif()

if ("${HTTP_UPSTREAM_IP_HASH}" STREQUAL "YES")
    set(ngx_module_name "ngx_http_upstream_ip_hash_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_upstream_ip_hash_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_UPSTREAM_IP_HASH}")

    ngx_auto_module()
endif()

if ("${HTTP_UPSTREAM_LEAST_CONN}" STREQUAL "YES")
    set(ngx_module_name "ngx_http_upstream_least_conn_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_upstream_least_conn_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_UPSTREAM_LEAST_CONN}")

    ngx_auto_module()
endif()

if ("${HTTP_UPSTREAM_KEEPALIVE}" STREQUAL "YES")
    set(ngx_module_name "ngx_http_upstream_keepalive_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_upstream_keepalive_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_UPSTREAM_KEEPALIVE}")

    ngx_auto_module()
endif()

if ("${HTTP_UPSTREAM_ZONE}" STREQUAL "YES")
    ngx_auto_have("NGX_HTTP_UPSTREAM_ZONE")

    set(ngx_module_name "ngx_http_upstream_zone_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_upstream_zone_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_UPSTREAM_ZONE}")

    ngx_auto_module()
endif()

if ("${HTTP_STUB_STATUS}" STREQUAL "YES")
    ngx_auto_have("NGX_STAT_STUB")

    set(ngx_module_name "ngx_http_stub_status_module")
    set(ngx_module_srcs "src/http/modules/ngx_http_stub_status_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${HTTP_STUB_STATUS}")

    ngx_auto_module()
endif()


if (NOT "${MAIL}" STREQUAL "NO")
    set(MAIL_MODULES "")
    set(MAIL_DEPS "")
    set(MAIL_INCS "")

    set(ngx_module_type "MAIL")
    set(ngx_module_libs "")
    set(ngx_module_link "YES")

    set(ngx_module_order "")

    set(ngx_module_name "ngx_mail_module" "ngx_mail_core_module")
    set(ngx_module_srcs
        "src/mail/ngx_mail.c"
        "src/mail/ngx_mail_core_module.c"
        "src/mail/ngx_mail_handler.c"
        "src/mail/ngx_mail_parse.c")

    ngx_auto_module()


    if ("${MAIL_SSL}" STREQUAL "YES")
        set(USE_OPENSSL "YES")
        ngx_auto_have("NGX_MAIL_SSL")

        set(ngx_module_name "ngx_mail_ssl_module")
        set(ngx_module_srcs "src/mail/ngx_mail_ssl_module.c")

        ngx_auto_module()
    endif()

    if ("${MAIL_POP3}" STREQUAL "YES")
        set(ngx_module_name "ngx_mail_pop3_module")
        set(ngx_module_srcs
            "src/mail/ngx_mail_pop3_module.c"
            "src/mail/ngx_mail_pop3_handler.c")

        ngx_auto_module()
    endif()

    if ("${MAIL_IMAP}" STREQUAL "YES")
        set(ngx_module_name "ngx_mail_imap_module")
        set(ngx_module_srcs
            "src/mail/ngx_mail_imap_module.c"
            "src/mail/ngx_mail_imap_handler.c")

        ngx_auto_module()
    endif()

    if ("${MAIL_SMTP}" STREQUAL "YES")
        set(ngx_module_name "ngx_mail_smtp_module")
        set(ngx_module_srcs
            "src/mail/ngx_mail_smtp_module.c"
            "src/mail/ngx_mail_smtp_handler.c")

        ngx_auto_module()
    endif()

    set(ngx_module_name "ngx_mail_auth_http_module")
    set(ngx_module_srcs "src/mail/ngx_mail_auth_http_module.c")

    ngx_auto_module()

    set(ngx_module_name "ngx_mail_proxy_module")
    set(ngx_module_srcs "src/mail/ngx_mail_proxy_module.c")

    ngx_auto_module()
endif()


if (NOT "${STREAM}" STREQUAL "NO")
    set(STREAM_MODULES "")
    set(STREAM_DEPS "")
    set(STREAM_INCS "")

    set(ngx_module_type "STREAM")

    set(ngx_module_order "")

    set(ngx_module_name
        "ngx_stream_module"
        "ngx_stream_core_module"
        "ngx_stream_log_module"
        "ngx_stream_proxy_module"
        "ngx_stream_upstream_module"
        "ngx_stream_write_filter_module")
    set(ngx_module_srcs
        src/stream/ngx_stream.c
        src/stream/ngx_stream_variables.c
        src/stream/ngx_stream_script.c
        src/stream/ngx_stream_handler.c
        src/stream/ngx_stream_core_module.c
        src/stream/ngx_stream_log_module.c
        src/stream/ngx_stream_proxy_module.c
        src/stream/ngx_stream_upstream.c
        src/stream/ngx_stream_upstream_round_robin.c
        src/stream/ngx_stream_write_filter_module.c)

    ngx_auto_module()


    if ("${STREAM_SSL}" STREQUAL "YES")
        set(USE_OPENSSL "YES")
        ngx_auto_have("NGX_STREAM_SSL")

        set(ngx_module_name "ngx_stream_ssl_module")
        set(ngx_module_srcs "src/stream/ngx_stream_ssl_module.c")
        set(ngx_module_libs "")
        set(ngx_module_link "${STREAM_SSL}")

        ngx_auto_module()
    endif()

    if ("${STREAM_REALIP}" STREQUAL "YES")
        set(ngx_module_name "ngx_stream_realip_module")
        set(ngx_module_srcs "src/stream/ngx_stream_realip_module.c")
        set(ngx_module_libs "")
        set(ngx_module_link "${STREAM_REALIP}")

        ngx_auto_module()
    endif()

    if ("${STREAM_LIMIT_CONN}" STREQUAL "YES")
        set(ngx_module_name "ngx_stream_limit_conn_module")
        set(ngx_module_srcs "src/stream/ngx_stream_limit_conn_module.c")
        set(ngx_module_libs "")
        set(ngx_module_link "${STREAM_LIMIT_CONN}")

        ngx_auto_module()
    endif()

    if ("${STREAM_ACCESS}" STREQUAL "YES")
        set(ngx_module_name "ngx_stream_access_module")
        set(ngx_module_srcs "src/stream/ngx_stream_access_module.c")
        set(ngx_module_libs "")
        set(ngx_module_link "${STREAM_ACCESS}")

        ngx_auto_module()
    endif()

    if ("${STREAM_GEO}" STREQUAL "YES")
        set(ngx_module_name "ngx_stream_geo_module")
        set(ngx_module_srcs "src/stream/ngx_stream_geo_module.c")
        set(ngx_module_libs "")
        set(ngx_module_link "${STREAM_GEO}")

        ngx_auto_module()
    endif()

    if (NOT "${STREAM_GEOIP}" STREQUAL "NO")
        set(ngx_module_name "ngx_stream_geoip_module")
        set(ngx_module_srcs "src/stream/ngx_stream_geoip_module.c")
        set(ngx_module_libs "GEOIP")
        set(ngx_module_link "${STREAM_GEOIP}")

        ngx_auto_module()
    endif()

    if ("${STREAM_MAP}" STREQUAL "YES")
        set(ngx_module_name "ngx_stream_map_module")
        set(ngx_module_srcs "src/stream/ngx_stream_map_module.c")
        set(ngx_module_libs "")
        set(ngx_module_link "${STREAM_MAP}")

        ngx_auto_module()
    endif()

    if ("${STREAM_SPLIT_CLIENTS}" STREQUAL "YES")
        set(ngx_module_name "ngx_stream_split_clients_module")
        set(ngx_module_srcs "src/stream/ngx_stream_split_clients_module.c")
        set(ngx_module_libs "")
        set(ngx_module_link "${STREAM_SPLIT_CLIENTS}")

        ngx_auto_module()
    endif()

    if ("${STREAM_RETURN}" STREQUAL "YES")
        set(ngx_module_name "ngx_stream_return_module")
        set(ngx_module_srcs "src/stream/ngx_stream_return_module.c")
        set(ngx_module_libs "")
        set(ngx_module_link "${STREAM_RETURN}")

        ngx_auto_module()
    endif()

    if ("${STREAM_UPSTREAM_HASH}" STREQUAL "YES")
        set(ngx_module_name "ngx_stream_upstream_hash_module")
        set(ngx_module_srcs "src/stream/ngx_stream_upstream_hash_module.c")
        set(ngx_module_libs "")
        set(ngx_module_link "${STREAM_UPSTREAM_HASH}")

        ngx_auto_module()
    endif()

    if ("${STREAM_UPSTREAM_LEAST_CONN}" STREQUAL "YES")
        set(ngx_module_name "ngx_stream_upstream_least_conn_module")
        set(ngx_module_srcs "src/stream/ngx_stream_upstream_least_conn_module.c")
        set(ngx_module_libs "")
        set(ngx_module_link "${STREAM_UPSTREAM_LEAST_CONN}")

        ngx_auto_module()
    endif()

    if ("${STREAM_UPSTREAM_ZONE}" STREQUAL "YES")
        ngx_auto_have("NGX_STREAM_UPSTREAM_ZONE")

        set(ngx_module_name "ngx_stream_upstream_zone_module")
        set(ngx_module_srcs "src/stream/ngx_stream_upstream_zone_module.c")
        set(ngx_module_libs "")
        set(ngx_module_link "${STREAM_UPSTREAM_ZONE}")

        ngx_auto_module()
    endif()

    if ("${STREAM_SSL_PREREAD}" STREQUAL "YES")
        set(ngx_module_name "ngx_stream_ssl_preread_module")
        set(ngx_module_srcs "src/stream/ngx_stream_ssl_preread_module.c")
        set(ngx_module_libs "")
        set(ngx_module_link "${STREAM_SSL_PREREAD}")

        ngx_auto_module()
    endif()
endif()

# external modules
foreach (addon_name ${NGX_ADDONS})
    message(STATUS "ngx: adding module ${addon_name}")

    set(ngx_module_type "")
    set(ngx_module_name "")
    set(ngx_module_srcs "")
    set(ngx_module_libs "")
    set(ngx_module_order "")
    set(ngx_module_link "ADDON")

    ngx_auto_module()

endforeach()

# external dynamic modules
foreach (addon_name ${NGX_DYNAMIC_ADDONS})
    message(STATUS "ngx: adding module ${addon_name}")

    set(ngx_module_type "")
    set(ngx_module_name "")
    set(ngx_module_srcs "")
    set(ngx_module_libs "")
    set(ngx_module_order "")
    set(ngx_module_link "DYNAMIC")

    ngx_auto_module()

endforeach()


if ("${USE_OPENSSL}" STREQUAL "YES")
    set(ngx_module_type "CORE")
    set(ngx_module_name "ngx_openssl_module")
    set(ngx_module_srcs
        "src/event/ngx_event_openssl.c"
        "src/event/ngx_event_openssl_stapling.c")
    set(ngx_module_libs "")
    set(ngx_module_link "YES")
    set(ngx_module_order "")

    ngx_auto_module()
endif()


if ("${USE_PCRE}" STREQUAL "YES")
    set(ngx_module_type "CORE")
    set(ngx_module_name "ngx_regex_module")
    set(ngx_module_srcs "src/core/ngx_regex.c")
    set(ngx_module_libs "")
    set(ngx_module_link "YES")
    set(ngx_module_order "")

    ngx_auto_module()
endif()


set(modules ${CORE_MODULES} ${EVENT_MODULES})

# thread pool module should be initialized after events
if ("${USE_THREADS}" STREQUAL "YES")
    set(modules ${modules} ${THREAD_POOL_MODULE})
endif()


if ("${HTTP}" STREQUAL "YES")
    set(modules ${modules} ${HTTP_MODULES} ${HTTP_FILTER_MODULES}
        ${HTTP_AUX_FILTER_MODULES} ${HTTP_INIT_FILTER_MODULES})
endif()


if (NOT "${MAIL}" STREQUAL "NO")

    if ("${MAIL}" STREQUAL "YES")
        set(modules ${modules} ${MAIL_MODULES})

    elseif ("${MAIL}" STREQUAL "DYNAMIC")
        set(ngx_module_name "${MAIL_MODULES}")
        set(ngx_module_srcs "${MAIL_SRCS}")
        set(ngx_module_libs "")
        set(ngx_module_link "DYNAMIC")

        ngx_auto_module()
    endif()
endif()


if (NOT "${STREAM}" STREQUAL "NO")

    if ("${STREAM}" STREQUAL "YES")
        set(modules ${modules} ${STREAM_MODULES})

    elseif ("${STREAM}" STREQUAL "DYNAMIC")
        set(ngx_module_name "${STREAM_MODULES}")
        set(ngx_module_srcs "${STREAM_SRCS}")
        set(ngx_module_libs "")
        set(ngx_module_link "DYNAMIC")

        ngx_auto_module()
    endif()
endif()


set(ngx_module_type "MISC")
set(MISC_MODULES "")

if ("${NGX_GOOGLE_PERFTOOLS}" STREQUAL "YES")
    set(ngx_module_name "ngx_google_perftools_module")
    set(ngx_module_srcs "src/misc/ngx_google_perftools_module.c")
    set(ngx_module_libs "")
    set(ngx_module_link "${NGX_GOOGLE_PERFTOOLS}")

    ngx_auto_module()
endif()

if ("${NGX_CPP_TEST}" STREQUAL "YES")
    set(ngx_module_name "")
    set(ngx_module_srcs "src/misc/ngx_cpp_test_module.cpp")
    set(ngx_module_libs "-lstdc++")
    set(ngx_module_link "${NGX_CPP_TEST}")

    ngx_auto_module()
endif()

set(modules ${modules} ${MISC_MODULES})

if ("${NGX_COMPAT}" STREQUAL "YES")
    ngx_auto_have("NGX_COMPAT")
    ngx_auto_have("NGX_HTTP_GZIP")
    ngx_auto_have("NGX_HTTP_DAV")
    ngx_auto_have("NGX_HTTP_REALIP")
    ngx_auto_have("NGX_HTTP_X_FORWARDED_FOR")
    ngx_auto_have("NGX_HTTP_HEADERS")
    ngx_auto_have("NGX_HTTP_UPSTREAM_ZONE")
    ngx_auto_have("NGX_STREAM_UPSTREAM_ZONE")
endif()


function(append_modules_c str)
    file(APPEND "${NGX_MODULES_C_NAME}" "${str}")
endfunction()


append_modules_c("\n")
append_modules_c("#include <ngx_config.h>\n")
append_modules_c("#include <ngx_core.h>\n")
append_modules_c("\n")
append_modules_c("${NGX_PRAGMA}\n")
append_modules_c("\n")

foreach (mod ${modules})
    append_modules_c("extern ngx_module_t  ${mod};\n")
endforeach()

append_modules_c("\n")
append_modules_c("ngx_module_t *ngx_modules[] = {\n")

foreach (mod ${modules})
    append_modules_c("    &${mod},\n")
endforeach()

append_modules_c("    NULL\n")
append_modules_c("};\n")
append_modules_c("\n")

append_modules_c("char *ngx_module_names[] = {\n")

foreach (mod ${modules})
    append_modules_c("    \"${mod}\",\n")
endforeach()

append_modules_c("    NULL\n")
append_modules_c("};\n")
append_modules_c("\n")

# ngx: auto/lib/conf script

if ("${USE_PCRE}" STREQUAL "YES")
    list(APPEND REQ_LIB_LIST libpcre)
    ngx_auto_have("NGX_PCRE")

    set(ngx_feature "PCRE JIT support")
    set(ngx_feature_name "NGX_HAVE_PCRE_JIT")
    set(ngx_feature_run "no")
    set(ngx_feature_incs "#include <pcre.h>")
    set(ngx_feature_path "")
    set(ngx_feature_libs "-lpcre")
    set(ngx_feature_test
        "int jit = 0\;"
        "pcre_free_study(NULL)\;"
        "pcre_config(PCRE_CONFIG_JIT, &jit)\;"
        "if (jit != 1) return 1\;")
    ngx_auto_feature()

else()
    if ("${USE_PCRE}" STREQUAL "DISABLED" AND "${HTTP_REWRITE}" STREQUAL "YES")
        message(FATAL_ERROR "PCRE is required for HTTP rewrite module")
    endif()
endif()

if ("${USE_OPENSSL}" STREQUAL "YES")
    list(APPEND REQ_LIB_LIST libssl libcrypto)
    ngx_auto_have("NGX_SSL")
    ngx_auto_have("NGX_OPENSSL")
endif()

if ("${USE_ZLIB}" STREQUAL "YES")
    list(APPEND REQ_LIB_LIST zlib)
    ngx_auto_have("NGX_ZLIB")
endif()

if (NOT "${USE_LIBXSLT}" STREQUAL "NO")
    list(APPEND REQ_LIB_LIST libxslt libexslt)

    set(ngx_feature "libexslt")
    set(ngx_feature_name "NGX_HAVE_EXSLT")
    set(ngx_feature_run "no")
    set(ngx_feature_incs "#include <libexslt/exslt.h>")
    set(ngx_feature_path "/usr/include/libxml2")
    set(ngx_feature_libs "-lexslt")
    set(ngx_feature_test "exsltRegisterAll()\;")
    ngx_auto_feature()
endif()

if (NOT "${USE_LIBGD}" STREQUAL "NO")
    list(APPEND REQ_LIB_LIST gdlib)

    set(ngx_feature "GD WebP support")
    set(ngx_feature_name "NGX_HAVE_GD_WEBP")
    set(ngx_feature_test "gdImagePtr img = gdImageCreateFromWebpPtr(1, NULL)\;")
    ngx_auto_feature()
endif()

if (NOT "${USE_PERL}" STREQUAL "NO")
    message(FATAL_ERROR "Perl detection not implemented")
endif()

if (NOT "${USE_GEOIP}" STREQUAL "NO")
    list(APPEND REQ_LIB_LIST geoip)

    set(ngx_feature "GeoIP IPv6 support")
    set(ngx_feature_name "NGX_HAVE_GEOIP_V6")
    set(ngx_feature_run "no")
    set(ngx_feature_incs
        "#include <stdio.h>"
        "#include <GeoIP.h>")
    set(ngx_feature_path "")
    set(ngx_feature_libs "")
    set(ngx_feature_test "printf(\"%d\", GEOIP_CITY_EDITION_REV0_V6)\;")
    ngx_auto_feature()
endif()

if ("${NGX_GOOGLE_PERFTOOLS}" STREQUAL "YES")
    message(FATAL_ERROR "Google perftool detection not implemented")
endif()

if (NOT "${NGX_LIBATOMIC}" STREQUAL "NO")
    list(APPEND REQ_LIB_LIST atomic_ops)

    set(ngx_feature="atomic_ops library")
    set(ngx_feature_name "NGX_HAVE_LIBATOMIC")
    set(ngx_feature_run "yes")
    set(ngx_feature_incs
        "#define AO_REQUIRE_CAS"
        "#include <atomic_ops.h>")
    set(ngx_feature_path "")
    set(ngx_feature_libs "-latomic_ops")
    set(ngx_feature_test
        "long  n = 0\;"
        "if (!AO_compare_and_swap(&n, 0, 1))"
        "    return 1\;"
        "if (AO_fetch_and_add(&n, 1) != 1)"
        "    return 1\;"
        "if (n != 2)"
        "    return 1\;"
        "AO_nop()\;")
    ngx_auto_feature()
endif()

find_package(PkgConfig REQUIRED)
pkg_check_modules(REQ REQUIRED ${REQ_LIB_LIST})

include_directories(${REQ_INCLUDE_DIRS})
link_directories(${REQ_LIBRARY_DIRS})

# ngx: back to configure script

ngx_auto_define("NGX_PREFIX"         "\"${NGX_PREFIX}/\"")
ngx_auto_define("NGX_CONF_PREFIX"    "\"${NGX_CONF_PREFIX}/\"")

ngx_auto_define("NGX_SBIN_PATH"      "\"${NGX_SBIN_PATH}\"")
ngx_auto_define("NGX_CONF_PATH"      "\"${NGX_CONF_PATH}\"")
ngx_auto_define("NGX_PID_PATH"       "\"${NGX_PID_PATH}\"")
ngx_auto_define("NGX_LOCK_PATH"      "\"${NGX_LOCK_PATH}\"")
ngx_auto_define("NGX_ERROR_LOG_PATH" "\"${NGX_ERROR_LOG_PATH}\"")

ngx_auto_define("NGX_HTTP_LOG_PATH"          "\"${NGX_HTTP_LOG_PATH}\"")
ngx_auto_define("NGX_HTTP_CLIENT_TEMP_PATH"  "\"${NGX_HTTP_CLIENT_TEMP_PATH}\"")
ngx_auto_define("NGX_HTTP_PROXY_TEMP_PATH"   "\"${NGX_HTTP_PROXY_TEMP_PATH}\"")
ngx_auto_define("NGX_HTTP_FASTCGI_TEMP_PATH" "\"${NGX_HTTP_FASTCGI_TEMP_PATH}\"")
ngx_auto_define("NGX_HTTP_UWSGI_TEMP_PATH"   "\"${NGX_HTTP_UWSGI_TEMP_PATH}\"")
ngx_auto_define("NGX_HTTP_SCGI_TEMP_PATH"    "\"${NGX_HTTP_SCGI_TEMP_PATH}\"")

# ngx: auto/make script

set(ngx_all_srcs ${CORE_SRCS})

if ("${HTTP}" STREQUAL "YES")
    list(APPEND ngx_all_srcs ${HTTP_SRCS})
endif()

if ("${MAIL}" STREQUAL "YES")
    list(APPEND ngx_all_srcs ${MAIL_SRCS})
endif()

if ("${STREAM}" STREQUAL "YES")
    list(APPEND ngx_all_srcs ${STREAM_SRCS})
endif()

list(APPEND ngx_all_srcs ${MISC_SRCS})

# TODO: dynamic modules

set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wno-unused-parameter -pthread")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-unused-parameter -pthread")

include_directories(src/core)
include_directories(src/event)
include_directories(src/http)
include_directories(src/http/modules)
include_directories(src/http/v2)
include_directories(src/mail)
include_directories(src/os/unix)
include_directories(src/stream)
include_directories("${AUTOGENERATED_DIR}")

add_executable(nginx
    ${ngx_all_srcs}
    "${NGX_MODULES_C_NAME}"
)

target_link_libraries(nginx
    ${REQ_LIBRARIES}
    dl
    crypt
)

# ngx: auto/install script

# TODO: dynamic modules

# ngx: auto/stubs script

ngx_auto_have("NGX_SUPPRESS_WARN")
ngx_auto_have("NGX_SMP")

# ngx: back to configure script

ngx_auto_define("NGX_USER" "\"${NGX_USER}\"")
ngx_auto_define("NGX_GROUP" "\"${NGX_GROUP}\"")

if (NOT "x${NGX_BUILD}" STREQUAL "x")
    ngx_auto_define("NGX_BUILD" "\"${NGX_BUILD}\"")
endif()

# installation

install(TARGETS nginx DESTINATION "${NGX_PREFIX}/bin")

get_filename_component(NGX_HTTP_LOG_DIR "${NGX_HTTP_LOG_PATH}" DIRECTORY)
install(DIRECTORY DESTINATION "${NGX_HTTP_LOG_DIR}")

install(DIRECTORY DESTINATION "${NGX_HTTP_CLIENT_TEMP_PATH}")
install(DIRECTORY DESTINATION "${NGX_HTTP_PROXY_TEMP_PATH}")
install(DIRECTORY DESTINATION "${NGX_HTTP_FASTCGI_TEMP_PATH}")
install(DIRECTORY DESTINATION "${NGX_HTTP_UWSGI_TEMP_PATH}")
install(DIRECTORY DESTINATION "${NGX_HTTP_SCGI_TEMP_PATH}")
